{"version":3,"file":"14.min_d8aeb96e8d.js","mappings":"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","sources":["webpack://tp_threejs/./src/ThreeJs/BaseApplication.ts","webpack://tp_threejs/./src/ThreeJs/Journey/BaseJourney.ts","webpack://tp_threejs/./src/ThreeJs/Journey/Journey18.ts"],"sourcesContent":["import { Camera, PerspectiveCamera, Scene, Vector3, WebGLRenderer } from 'three';\nimport { STAGE } from './../Config';\n\n/**\n * 应用基类\n */\nexport class BaseApplication {\n\tpublic appId: string = '00';\n\tpublic appName: string = 'BASE';\n\tprotected width: number = STAGE.width;\n\tprotected height: number = STAGE.height;\n\tprotected canvas: HTMLCanvasElement = null;\n\n\tprotected scene: Scene;\n\tprotected camera: Camera;\n\tprotected renderer: WebGLRenderer;\n\tprotected viewCenter: Vector3 = new Vector3(0, 0, 0);\n\n\tpublic constructor(canvas: HTMLCanvasElement) {\n\t\tthis.canvas = canvas;\n\t}\n\n\t/**\n\t * @override 子类覆写\n\t */\n\tprotected initRender(): void {\n\t\tconst renderer = new WebGLRenderer({\n\t\t\tantialias: true, // 抗锯齿开启\n\t\t\tcanvas: this.canvas,\n\t\t});\n\t\trenderer.setSize(this.width, this.height); // 设置渲染器的宽度和高度\n\t\trenderer.setClearColor('#000000', 1.0); // 设置背景颜色\n\t\trenderer.setPixelRatio(window.devicePixelRatio); // 设置设备像素比\n\n\t\tthis.renderer = renderer;\n\t}\n\n\t/**\n\t * @override 子类覆写\n\t */\n\tprotected initScene(): void {\n\t\tconst scene = new Scene();\n\t\tthis.scene = scene;\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprotected initCamera(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t */\n\tprotected initLight(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t */\n\tprotected initModel(): void {}\n\n\t/**\n\t * @override 子类复写\n\t */\n\tprotected onCreating(): void {}\n\n\t/**\n\t * @override 子类复写\n\t */\n\tprotected onCreated(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t * 开始渲染\n\t */\n\tprotected onRender(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t * 开始销毁\n\t */\n\tprotected onDestroy(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t * 开始 resize\n\t */\n\tprotected onResize(): void {}\n\n\t/**\n\t * 创建后的调用\n\t */\n\tprivate create(): void {\n\t\tthis.onCreating();\n\t\tthis.initRender();\n\t\tthis.initScene();\n\t\tthis.initCamera();\n\t\tthis.initLight();\n\t\tthis.initModel();\n\t\tthis.onCreated();\n\t}\n\n\t/**\n\t * 渲染\n\t */\n\tprivate render(): void {\n\t\tthis.renderer?.clear();\n\t\tthis.onRender();\n\t\tthis.handle = requestAnimationFrame(this.render.bind(this));\n\t}\n\n\t/**\n\t * 开始执行\n\t */\n\tprivate handle: number = -1;\n\tpublic run(): void {\n\t\tthis.create();\n\t\tthis.render();\n\t}\n\n\t/**\n\t * 视口变化\n\t */\n\tpublic resize(): void {\n\t\t// update size\n\t\tthis.width = window.innerWidth;\n\t\tthis.height = window.innerHeight;\n\n\t\t// update camera\n\t\tif (this.camera && this.camera instanceof PerspectiveCamera) {\n\t\t\tthis.camera.aspect = this.width / this.height;\n\t\t\tthis.camera.updateProjectionMatrix();\n\t\t}\n\n\t\t// update renderer\n\t\tthis.renderer?.setSize(this.width, this.height);\n\t\tthis.renderer?.setPixelRatio(Math.min(2, window.devicePixelRatio));\n\n\t\tthis.onResize();\n\t}\n\n\t/**\n\t * @override 子类覆写\n\t * 销毁清理\n\t */\n\tpublic destroy(): void {\n\t\tthis.onDestroy();\n\n\t\tthis.scene.clear();\n\t\tthis.renderer.clear();\n\t\tcancelAnimationFrame(this.handle);\n\t\tconsole.log(`销毁应用【${this.appId} ${this.appName}】`);\n\t}\n}\n","import { BaseApplication } from '../BaseApplication';\n\nexport class BaseJourney extends BaseApplication {}\n","import * as dat from 'dat.gui';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { BaseJourney } from './BaseJourney';\n\n/**\n * Journey -  Particles\n */\n\nexport class Journey18 extends BaseJourney {\n\tprivate gui: dat.GUI;\n\tprivate clock: THREE.Clock;\n\t/**\n\t * @override\n\t */\n\tprotected onCreating(): void {\n\t\t// clock\n\t\tthis.clock = new THREE.Clock();\n\n\t\t// GUI\n\t\tthis.gui = new dat.GUI();\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprotected onCreated(): void {\n\t\t// camera controller\n\t\tthis.controls = new OrbitControls(this.camera, this.canvas);\n\t\t// this.controls.autoRotate = true;\n\t\tthis.controls.enableDamping = true;\n\n\t\t// axes\n\t\t// const axesHelp = new THREE.AxesHelper(10);\n\t\t// this.scene.add(axesHelp);\n\t}\n\n\t/**\n\t * @override\n\t */\n\n\tprivate controls: OrbitControls;\n\tprotected initCamera(): void {\n\t\tconst camera = new THREE.PerspectiveCamera(75, this.width / this.height);\n\t\tcamera.position.set(0, 2, 2);\n\t\tcamera.lookAt(new THREE.Vector3(0, 0, 0));\n\n\t\tthis.camera = camera;\n\t\tthis.scene.add(camera);\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprivate particles: THREE.Points;\n\tprotected initModel(): void {\n\t\tconst scene = this.scene;\n\t\tconst textureLoader = new THREE.TextureLoader();\n\t\tconst particlesTexture = textureLoader.load('./resource/journey/particles/2.png');\n\n\t\t// particles\n\t\t// const particlesGeometry = new THREE.SphereBufferGeometry(1, 32, 32);\n\t\tconst particlesGeometry = new THREE.BufferGeometry();\n\t\tconst count = 20000;\n\t\tconst positions = new Float32Array(count * 3);\n\t\tconst colors = new Float32Array(count * 3);\n\n\t\tfor (let i = 0; i < count * 3; i++) {\n\t\t\tpositions[i] = (Math.random() - 0.5) * 8;\n\t\t\tcolors[i] = Math.random();\n\t\t}\n\t\tparticlesGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n\t\tparticlesGeometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));\n\n\t\tconst particlesMaterial = new THREE.PointsMaterial();\n\t\tparticlesMaterial.size = 0.1;\n\t\tparticlesMaterial.sizeAttenuation = true;\n\t\t// particlesMaterial.color = new THREE.Color(0xffcc88);\n\t\tparticlesMaterial.transparent = true;\n\t\tparticlesMaterial.alphaMap = particlesTexture;\n\t\t// particlesMaterial.alphaTest = 0.001;\n\t\t// particlesMaterial.depthTest = false;\n\t\tparticlesMaterial.depthWrite = false;\n\t\tparticlesMaterial.blending = THREE.AdditiveBlending;\n\t\tparticlesMaterial.vertexColors = true;\n\n\t\t// particles points\n\t\tconst particles = new THREE.Points(particlesGeometry, particlesMaterial);\n\t\tscene.add(particles);\n\n\t\t// const cube = new THREE.Mesh(new THREE.BoxBufferGeometry(), new THREE.MeshBasicMaterial());\n\t\t// scene.add(cube);\n\n\t\tthis.particles = particles;\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprotected onRender(): void {\n\t\tthis.controls.update();\n\t\tthis.renderer.render(this.scene, this.camera);\n\n\t\tconst elapsedTime = this.clock.getElapsedTime();\n\n\t\t// this.particles.rotation.y = elapsedTime * 0.2;\n\t\tfor (let i = 0; i < 20000; i++) {\n\t\t\tconst i3 = i * 3;\n\n\t\t\tconst array: any = this.particles.geometry.attributes.position.array;\n\t\t\tconst x = array[i3 + 0];\n\t\t\tarray[i3 + 1] = Math.sin(elapsedTime + x);\n\t\t}\n\t\tthis.particles.geometry.attributes.position.needsUpdate = true;\n\t}\n\n\t/**\n\t * @protected\n\t */\n\tprotected onDestroy(): void {\n\t\tthis.gui?.destroy();\n\t}\n}\n"],"names":["BaseApplication","canvas","appId","appName","width","height","viewCenter","handle","this","initRender","renderer","antialias","setSize","setClearColor","setPixelRatio","window","devicePixelRatio","initScene","scene","initCamera","initLight","initModel","onCreating","onCreated","onRender","onDestroy","onResize","create","render","clear","requestAnimationFrame","bind","run","resize","innerWidth","innerHeight","camera","aspect","updateProjectionMatrix","Math","min","destroy","cancelAnimationFrame","console","log","BaseJourney","Journey18","clock","gui","controls","enableDamping","position","set","lookAt","add","particlesTexture","load","particlesGeometry","positions","Float32Array","count","colors","i","random","setAttribute","particlesMaterial","size","sizeAttenuation","transparent","alphaMap","depthWrite","blending","vertexColors","particles","update","elapsedTime","getElapsedTime","i3","array","geometry","attributes","x","sin","needsUpdate"],"sourceRoot":""}