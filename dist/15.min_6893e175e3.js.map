{"version":3,"file":"15.min_6893e175e3.js","mappings":"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","sources":["webpack://tp_threejs/./src/ThreeJs/Shaders/Galaxy/galaxy.fs.glsl","webpack://tp_threejs/./src/ThreeJs/Shaders/Galaxy/galaxy.vs.glsl","webpack://tp_threejs/./src/ThreeJs/BaseApplication.ts","webpack://tp_threejs/./src/ThreeJs/Journey/BaseJourney.ts","webpack://tp_threejs/./src/ThreeJs/Journey/Journey30.ts"],"sourcesContent":["export default \"varying vec3 vColor;\\n\\nvoid main() {\\n    // float strength = distance(gl_PointCoord, vec2(0.5));\\n    // strength = step(0.5, strength);\\n    // strength = 1.0 - strength;\\n\\n    // float strength = distance(gl_PointCoord, vec2(0.5));\\n    // strength = strength * 2.0;\\n    // strength = 1.0 - strength;\\n\\n    float strength = distance(gl_PointCoord, vec2(0.5));\\n    strength = 1.0 - strength;\\n    strength = pow(strength, 10.0);\\n\\n    vec3 color = mix(vec3(0.0), vColor, strength);\\n\\n    gl_FragColor = vec4(color, 1.0);\\n}\";","export default \"uniform float uSize;\\nuniform float uTime;\\n\\nattribute float aScale;\\nattribute vec3 aRandomness;\\n\\nvarying vec3 vColor;\\n\\nvoid main() {\\n    vec4 modelPosition = modelMatrix * vec4(position, 1.0);\\n\\n    // Rotate\\n    float angle = atan(modelPosition.x, modelPosition.z);\\n    float distanceToCenter = length(modelPosition.xz);\\n    float angleOffset = (1.0 / distanceToCenter) * uTime;\\n    angle += angleOffset;\\n    modelPosition.x = cos(angle) * distanceToCenter;\\n    modelPosition.z = sin(angle) * distanceToCenter;\\n\\n    modelPosition.xyz += aRandomness;\\n\\n    vec4 viewPosition = viewMatrix * modelPosition;\\n    gl_Position = projectionMatrix * viewPosition;\\n\\n    gl_PointSize = uSize * aScale;\\n    gl_PointSize *= (1.0 / -viewPosition.z);\\n\\n    vColor = color;\\n}\";","import { Camera, PerspectiveCamera, Scene, Vector3, WebGLRenderer } from 'three';\nimport { STAGE } from './../Config';\n\n/**\n * 应用基类\n */\nexport class BaseApplication {\n\tpublic appId: string = '00';\n\tpublic appName: string = 'BASE';\n\tprotected width: number = STAGE.width;\n\tprotected height: number = STAGE.height;\n\tprotected canvas: HTMLCanvasElement = null;\n\n\tprotected scene: Scene;\n\tprotected camera: Camera;\n\tprotected renderer: WebGLRenderer;\n\tprotected viewCenter: Vector3 = new Vector3(0, 0, 0);\n\n\tpublic constructor(canvas: HTMLCanvasElement) {\n\t\tthis.canvas = canvas;\n\t}\n\n\t/**\n\t * @override 子类覆写\n\t */\n\tprotected initRender(): void {\n\t\tconst renderer = new WebGLRenderer({\n\t\t\tantialias: true, // 抗锯齿开启\n\t\t\tcanvas: this.canvas,\n\t\t});\n\t\trenderer.setSize(this.width, this.height); // 设置渲染器的宽度和高度\n\t\trenderer.setClearColor('#000000', 1.0); // 设置背景颜色\n\t\trenderer.setPixelRatio(window.devicePixelRatio); // 设置设备像素比\n\n\t\tthis.renderer = renderer;\n\t}\n\n\t/**\n\t * @override 子类覆写\n\t */\n\tprotected initScene(): void {\n\t\tconst scene = new Scene();\n\t\tthis.scene = scene;\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprotected initCamera(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t */\n\tprotected initLight(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t */\n\tprotected initModel(): void {}\n\n\t/**\n\t * @override 子类复写\n\t */\n\tprotected onCreating(): void {}\n\n\t/**\n\t * @override 子类复写\n\t */\n\tprotected onCreated(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t * 开始渲染\n\t */\n\tprotected onRender(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t * 开始销毁\n\t */\n\tprotected onDestroy(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t * 开始 resize\n\t */\n\tprotected onResize(): void {}\n\n\t/**\n\t * 创建后的调用\n\t */\n\tprivate create(): void {\n\t\tthis.onCreating();\n\t\tthis.initRender();\n\t\tthis.initScene();\n\t\tthis.initCamera();\n\t\tthis.initLight();\n\t\tthis.initModel();\n\t\tthis.onCreated();\n\t}\n\n\t/**\n\t * 渲染\n\t */\n\tprivate render(): void {\n\t\tthis.renderer?.clear();\n\t\tthis.onRender();\n\t\tthis.handle = requestAnimationFrame(this.render.bind(this));\n\t}\n\n\t/**\n\t * 开始执行\n\t */\n\tprivate handle: number = -1;\n\tpublic run(): void {\n\t\tthis.create();\n\t\tthis.render();\n\t}\n\n\t/**\n\t * 视口变化\n\t */\n\tpublic resize(): void {\n\t\t// update size\n\t\tthis.width = window.innerWidth;\n\t\tthis.height = window.innerHeight;\n\n\t\t// update camera\n\t\tif (this.camera && this.camera instanceof PerspectiveCamera) {\n\t\t\tthis.camera.aspect = this.width / this.height;\n\t\t\tthis.camera.updateProjectionMatrix();\n\t\t}\n\n\t\t// update renderer\n\t\tthis.renderer?.setSize(this.width, this.height);\n\t\tthis.renderer?.setPixelRatio(Math.min(2, window.devicePixelRatio));\n\n\t\tthis.onResize();\n\t}\n\n\t/**\n\t * @override 子类覆写\n\t * 销毁清理\n\t */\n\tpublic destroy(): void {\n\t\tthis.onDestroy();\n\n\t\tthis.scene.clear();\n\t\tthis.renderer.clear();\n\t\tcancelAnimationFrame(this.handle);\n\t\tconsole.log(`销毁应用【${this.appId} ${this.appName}】`);\n\t}\n}\n","import { BaseApplication } from '../BaseApplication';\n\nexport class BaseJourney extends BaseApplication {}\n","import * as dat from 'dat.gui';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport galaxyFragmentShader from '../Shaders/Galaxy/galaxy.fs.glsl';\nimport galaxyVertexShader from '../Shaders/Galaxy/galaxy.vs.glsl';\nimport { BaseJourney } from './BaseJourney';\n\n/**\n *  Journey - Journey - Animated Galaxy\n */\n\nexport class Journey30 extends BaseJourney {\n\tprivate gui: dat.GUI;\n\tprivate clock: THREE.Clock;\n\t/**\n\t * @override\n\t */\n\tprotected onCreating(): void {\n\t\t// clock\n\t\tthis.clock = new THREE.Clock();\n\n\t\t// GUI\n\t\tthis.gui = new dat.GUI();\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprotected onCreated(): void {\n\t\t// camera controller\n\t\tthis.controls = new OrbitControls(this.camera, this.canvas);\n\t\t// this.controls.autoRotate = true;\n\t\tthis.controls.enableDamping = true;\n\t}\n\n\t/**\n\t * @override\n\t */\n\n\tprivate controls: OrbitControls;\n\tprotected initCamera(): void {\n\t\tconst camera = new THREE.PerspectiveCamera(75, this.width / this.height);\n\t\tcamera.position.set(4, 4, 4);\n\t\tcamera.lookAt(new THREE.Vector3(0, 0, 0));\n\n\t\tthis.camera = camera;\n\t\tthis.scene.add(camera);\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprivate parameters: any;\n\tprivate geometry: THREE.BufferGeometry;\n\t// private material: THREE.PointsMaterial;\n\tprivate material: THREE.ShaderMaterial;\n\tprivate points: THREE.Points;\n\tprivate generateGalaxy(): void {\n\t\tif (this.points != null) {\n\t\t\tthis.geometry?.dispose();\n\t\t\tthis.material?.dispose();\n\t\t\tthis.scene?.remove(this.points);\n\t\t}\n\n\t\tconst parameters = this.parameters;\n\t\tconst geometry = this.geometry;\n\t\tconst points = this.points;\n\n\t\tconst positions = new Float32Array(parameters.count * 3);\n\t\tconst colors = new Float32Array(parameters.count * 3);\n\t\tconst scale = new Float32Array(parameters.count * 1);\n\t\tconst randomness = new Float32Array(parameters.count * 3);\n\n\t\tconst insideColor = new THREE.Color(parameters.insideColor);\n\t\tconst outsideColor = new THREE.Color(parameters.outsideColor);\n\n\t\tfor (let i = 0; i < parameters.count; i++) {\n\t\t\tconst i3 = i * 3;\n\t\t\t// position\n\t\t\tconst radius = Math.random() * parameters.radius;\n\t\t\tconst branchAngle = ((i % parameters.branches) / parameters.branches) * Math.PI * 2;\n\n\t\t\tpositions[i3 + 0] = Math.cos(branchAngle) * radius;\n\t\t\tpositions[i3 + 1] = 0.0;\n\t\t\tpositions[i3 + 2] = Math.sin(branchAngle) * radius;\n\n\t\t\tconst randomX = Math.pow(Math.random(), parameters.randomnessPower) * (Math.random() > 0.5 ? 1 : -1) * parameters.randomness * radius;\n\t\t\tconst randomY = Math.pow(Math.random(), parameters.randomnessPower) * (Math.random() > 0.5 ? 1 : -1) * parameters.randomness * radius;\n\t\t\tconst randomZ = Math.pow(Math.random(), parameters.randomnessPower) * (Math.random() > 0.5 ? 1 : -1) * parameters.randomness * radius;\n\n\t\t\trandomness[i3 + 0] = randomX;\n\t\t\trandomness[i3 + 1] = randomY;\n\t\t\trandomness[i3 + 2] = randomZ;\n\n\t\t\t// color\n\t\t\tconst mixedColor = insideColor.clone();\n\t\t\tmixedColor.lerp(outsideColor, radius / parameters.radius);\n\n\t\t\tcolors[i3 + 0] = mixedColor.r;\n\t\t\tcolors[i3 + 1] = mixedColor.g;\n\t\t\tcolors[i3 + 2] = mixedColor.b;\n\n\t\t\tscale[i] = Math.random();\n\t\t}\n\n\t\tgeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n\t\tgeometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));\n\t\tgeometry.setAttribute('aScale', new THREE.BufferAttribute(scale, 1));\n\t\tgeometry.setAttribute('aRandomness', new THREE.BufferAttribute(randomness, 3));\n\n\t\tthis.scene?.add(points);\n\t}\n\n\tprotected initModel(): void {\n\t\tconst gui = this.gui;\n\n\t\tconst parameters: any = {};\n\t\tparameters.count = 20000;\n\t\tparameters.radius = 5;\n\t\tparameters.branches = 3;\n\t\tparameters.randomness = 0.5;\n\t\tparameters.randomnessPower = 3;\n\t\tparameters.insideColor = 0xff6030;\n\t\tparameters.outsideColor = 0x1b3984;\n\n\t\tthis.parameters = parameters;\n\n\t\tconst geometry = new THREE.BufferGeometry();\n\t\tthis.geometry = geometry;\n\n\t\tconst material = new THREE.ShaderMaterial({\n\t\t\tdepthWrite: false,\n\t\t\tblending: THREE.AdditiveBlending,\n\t\t\tvertexColors: true,\n\t\t\tvertexShader: galaxyVertexShader,\n\t\t\tfragmentShader: galaxyFragmentShader,\n\t\t\tuniforms: {\n\t\t\t\tuTime: { value: 0 },\n\t\t\t\tuSize: { value: 30 * this.renderer.getPixelRatio() },\n\t\t\t},\n\t\t});\n\n\t\tthis.material = material;\n\n\t\tconst points = new THREE.Points(geometry, material);\n\t\tthis.points = points;\n\n\t\tthis.generateGalaxy();\n\n\t\t// DEBUG\n\t\tgui.add(parameters, 'count').min(100).max(100000).step(100).onFinishChange(this.generateGalaxy.bind(this));\n\t\tgui.add(parameters, 'radius').min(0.01).max(20).step(0.001).onFinishChange(this.generateGalaxy.bind(this));\n\t\tgui.add(parameters, 'branches').min(1).max(6).step(1).onFinishChange(this.generateGalaxy.bind(this));\n\t\tgui.add(parameters, 'randomness').min(0.01).max(3).step(0.01).onFinishChange(this.generateGalaxy.bind(this));\n\t\tgui.add(parameters, 'randomnessPower').min(1).max(5).step(0.1).onFinishChange(this.generateGalaxy.bind(this));\n\t\tgui.addColor(parameters, 'insideColor').onFinishChange(this.generateGalaxy.bind(this));\n\t\tgui.addColor(parameters, 'outsideColor').onFinishChange(this.generateGalaxy.bind(this));\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprotected onRender(): void {\n\t\tthis.controls.update();\n\t\tthis.renderer.render(this.scene, this.camera);\n\n\t\tconst elapsedTime = this.clock.getElapsedTime();\n\t\tthis.material.uniforms.uTime.value = elapsedTime;\n\t}\n\n\t/**\n\t * @protected\n\t */\n\tprotected onDestroy(): void {\n\t\tthis.gui?.destroy();\n\t\tthis.gui = null;\n\t}\n}\n"],"names":["BaseApplication","canvas","appId","appName","width","height","viewCenter","handle","this","initRender","renderer","antialias","setSize","setClearColor","setPixelRatio","window","devicePixelRatio","initScene","scene","initCamera","initLight","initModel","onCreating","onCreated","onRender","onDestroy","onResize","create","render","clear","requestAnimationFrame","bind","run","resize","innerWidth","innerHeight","camera","aspect","updateProjectionMatrix","Math","min","destroy","cancelAnimationFrame","console","log","BaseJourney","Journey30","clock","gui","controls","enableDamping","position","set","lookAt","add","generateGalaxy","points","geometry","dispose","material","remove","parameters","positions","Float32Array","count","colors","scale","randomness","insideColor","outsideColor","i","i3","radius","random","branchAngle","branches","PI","cos","sin","randomX","pow","randomnessPower","randomY","randomZ","mixedColor","clone","lerp","r","g","b","setAttribute","depthWrite","blending","vertexColors","vertexShader","fragmentShader","uniforms","uTime","value","uSize","getPixelRatio","max","step","onFinishChange","addColor","update","elapsedTime","getElapsedTime"],"sourceRoot":""}