{"version":3,"file":"10.min_e8fbeee30c.js","mappings":"mJAAA,6M,6CCAA,kjB,6CCAA,w6G,6CCAA,8R,uDCMO,MAAMA,EAYZ,YAAmBC,GAXZ,KAAAC,MAAgB,KAChB,KAAAC,QAAkB,OACf,KAAAC,MAAgB,UAChB,KAAAC,OAAiB,WACjB,KAAAJ,OAA4B,KAK5B,KAAAK,WAAsB,IAAI,KAAQ,EAAG,EAAG,GAiG1C,KAAAC,QAAkB,EA9FzBC,KAAKP,OAASA,EAMLQ,aACT,MAAMC,EAAW,IAAI,KAAc,CAClCC,WAAW,EACXV,OAAQO,KAAKP,SAEdS,EAASE,QAAQJ,KAAKJ,MAAOI,KAAKH,QAClCK,EAASG,cAAc,UAAW,GAClCH,EAASI,cAAcC,OAAOC,kBAE9BR,KAAKE,SAAWA,EAMPO,YACT,MAAMC,EAAQ,IAAI,KAClBV,KAAKU,MAAQA,EAMJC,cAKAC,aAKAC,aAKAC,cAKAC,aAMAC,YAMAC,aAMAC,YAKFC,SACPnB,KAAKc,aACLd,KAAKC,aACLD,KAAKS,YACLT,KAAKW,aACLX,KAAKY,YACLZ,KAAKa,YACLb,KAAKe,YAMEK,S,MACM,QAAb,EAAApB,KAAKE,gBAAQ,SAAEmB,QACfrB,KAAKgB,WACLhB,KAAKD,OAASuB,sBAAsBtB,KAAKoB,OAAOG,KAAKvB,OAO/CwB,MACNxB,KAAKmB,SACLnB,KAAKoB,SAMCK,S,QAENzB,KAAKJ,MAAQW,OAAOmB,WACpB1B,KAAKH,OAASU,OAAOoB,YAGjB3B,KAAK4B,QAAU5B,KAAK4B,kBAAkB,OACzC5B,KAAK4B,OAAOC,OAAS7B,KAAKJ,MAAQI,KAAKH,OACvCG,KAAK4B,OAAOE,0BAIA,QAAb,EAAA9B,KAAKE,gBAAQ,SAAEE,QAAQJ,KAAKJ,MAAOI,KAAKH,QAC3B,QAAb,EAAAG,KAAKE,gBAAQ,SAAEI,cAAcyB,KAAKC,IAAI,EAAGzB,OAAOC,mBAEhDR,KAAKkB,WAOCe,UACNjC,KAAKiB,YAELjB,KAAKU,MAAMW,QACXrB,KAAKE,SAASmB,QACda,qBAAqBlC,KAAKD,QAC1BoC,QAAQC,IAAI,QAAQpC,KAAKN,SAASM,KAAKL,e,8DCpJlC,MAAM0C,UAAoB,O,iKCUjC,MAAMC,EAAgBC,SAASC,cAAc,OAC7CF,EAAcG,UAAUC,IAAI,eAMrB,MAAMC,UAAkB,EAAAN,YASpBvB,aAETd,KAAK4C,OAAS,CACbC,WAAY,QACZC,iBAAkB,SAClBC,eAAgB,GAIjB/C,KAAKgD,MAAQ,IAAI,IAGjBhD,KAAKiD,IAAM,IAAI,IAEfV,SAASW,KAAKC,YAAYb,GAOjBvB,YAETf,KAAKoD,SAAW,IAAI,IAAcpD,KAAK4B,OAAQ5B,KAAKP,QACpDO,KAAKoD,SAASC,eAAgB,EAE9BrD,KAAKE,SAASoD,eAAiB,KAI/B,MAAMC,EAAkB,IAAI,KAA0B,EAAG,EAAG,EAAG,GACzDC,EAAkB,IAAI,KAAqB,CAChDC,SAAU,CACTC,OAAQ,CAAEC,MAAO,IAElBC,aAAa,EACbC,aAAc,0HAKdC,eAAgB,4KAOXC,EAAc,IAAI,KAAWR,EAAiBC,GACpDxD,KAAKgE,aAAeD,EACpB/D,KAAKU,MAAMgC,IAAIqB,GAMNnD,YACT,MAAMqD,EAAmB,IAAI,IAAuB,SAAU,GAC9DA,EAAiBC,SAASC,IAAI,IAAM,GAAI,MACxCF,EAAiBG,OAAOC,QAAQF,IAAI,KAAM,MAC1CF,EAAiBK,YAAa,EAC9BL,EAAiBG,OAAOG,WAAa,IACrCvE,KAAKU,MAAMgC,IAAIuB,GAMNtD,aACT,MAAMiB,EAAS,IAAI,KAAwB,GAAI5B,KAAKJ,MAAQI,KAAKH,OAAQ,GAAK,KAC9E+B,EAAOsC,SAASC,IAAI,EAAG,EAAG,GAC1BnE,KAAK4B,OAASA,EACd5B,KAAKU,MAAMgC,IAAId,GAQNf,YACT,MAAMH,EAAQV,KAAKU,MACb8D,EAAa,IAAI,MAEtB,KACC,gBAAiB,IAAK,KACrB,OAASxE,KAAKgE,aAAaS,SAAkChB,SAASC,OAAQ,CAAEgB,SAAU,EAAGf,MAAO,IACpGrB,EAAcqC,MAAMC,UAAY,GAChCtC,EAAcG,UAAUC,IAAI,eAK9B,CAACmC,EAASC,EAAaC,KACtB,MAAMC,EAAgBF,EAAcC,EACpCzC,EAAcqC,MAAMC,UAAY,UAAUI,QAKtCC,EAAgB,IAAI,KAAoBT,GAGxCU,EAAc,IAAI,IACxBA,EAAYC,eAAe,mBAG3B,MAAMC,EAAa,IAAI,IAAWZ,GAClCY,EAAWC,eAAeH,GAG1B,MAAMI,EAAcL,EAAcM,KAAK,mEACvCD,EAAYE,OAAQ,EACpBF,EAAYG,SAAW,KAGvB,MAAMC,EAAe,IAAI,KAAwB,CAAEC,IAAKL,IAElDM,EAAsB,IAAI,KAAqB,CACpDnC,SAAU,CACToC,MAAO,CAAElC,MAAO,GAChBmC,YAAa,CAAEnC,MAAO,IAAI,IAAY3D,KAAK4C,OAAOE,mBAClDiD,UAAW,CAAEpC,MAAO,IAAI,IAAY3D,KAAK4C,OAAOG,kBAEjDc,aAAc,UACdC,eAAgB,YAEjB9D,KAAK4F,oBAAsBA,EAE3B,MAAMI,EAAoB,IAAI,KAAwB,CAAEC,MAAO,WAG/Db,EAAWG,KAAK,6DAA6DW,IAC5E,MAAMC,EAAQD,EAAKxF,MAIFwF,EAAKxF,MAAM0F,SAASC,MAAKC,GAAwB,UAAfA,EAAMC,OAChD9B,SAAWiB,EAEpB,MAAMc,EAAiBN,EAAKxF,MAAM0F,SAASC,MAAKC,GAAwB,eAAfA,EAAMC,OACzDE,EAAiBP,EAAKxF,MAAM0F,SAASC,MAAKC,GAAwB,eAAfA,EAAMC,OAC/DC,EAAe/B,SAAWgC,EAAehC,SAAWuB,EAE9BE,EAAKxF,MAAM0F,SAASC,MAAKC,GAAwB,cAAfA,EAAMC,OAChD9B,SAAWmB,EAGzBlF,EAAMgC,IAAIyD,MAIX,MAAMO,EAAoB,IAAI,IAExBC,EAAgB,IAAIC,aAAaC,KACjCC,EAAa,IAAIF,aAFA,IAGvB,IAAK,IAAIG,EAAI,EAAGA,EAHO,GAGaA,IACnCJ,EAAkB,EAAJI,EAAQ,GAA6B,GAAvBhF,KAAKiF,SAAW,IAC5CL,EAAkB,EAAJI,EAAQ,GAA6B,GAAvBhF,KAAKiF,SAAW,IAC5CL,EAAkB,EAAJI,EAAQ,GAA6B,GAAvBhF,KAAKiF,SAAW,IAE5CF,EAAWC,GAAKhF,KAAKiF,SAEtBN,EAAkBO,aAAa,WAAY,IAAI,IAAsBN,EAAe,IACpFD,EAAkBO,aAAa,SAAU,IAAI,IAAsBH,EAAY,IAE/E,MAAMI,EAAoB,IAAI,KAAqB,CAClDzD,SAAU,CACT0D,YAAa,CAAExD,MAAO5B,KAAKC,IAAIzB,OAAOC,iBAAkB,IACxD4G,MAAO,CAAEzD,MAAO,IAChBkC,MAAO,CAAElC,MAAO,IAEjBE,aAAc,UACdC,eAAgB,UAChBuD,SAAU,IACVC,YAAY,EACZ1D,aAAa,IAER2D,EAAgB,IAAI,KAAab,EAAmBQ,GAC1DxG,EAAMgC,IAAI6E,GAEVvH,KAAKkH,kBAAoBA,EAGzBlH,KAAKiD,IAAIP,IAAIwE,EAAkBzD,SAAS2D,MAAO,SAASI,KAAK,GAAGxF,IAAI,GAAGyF,IAAI,KAC3EzH,KAAKiD,IAAIyE,SAAS1H,KAAK4C,OAAQ,oBAAoB+E,UAAS,KAC3D/B,EAAoBnC,SAASqC,YAAYnC,MAAMQ,IAAInE,KAAK4C,OAAOE,qBAEhE9C,KAAKiD,IAAIyE,SAAS1H,KAAK4C,OAAQ,kBAAkB+E,UAAS,KACzD/B,EAAoBnC,SAASsC,UAAUpC,MAAMQ,IAAInE,KAAK4C,OAAOG,mBAIrD7B,WACLlB,KAAKkH,oBAAmBlH,KAAKkH,kBAAkBzD,SAAS0D,YAAYxD,MAAQ5B,KAAKC,IAAIzB,OAAOC,iBAAkB,IAMzGQ,WACThB,KAAKoD,SAASwE,SACd5H,KAAKE,SAASkB,OAAOpB,KAAKU,MAAOV,KAAK4B,QAEtC,MAAMiG,EAAc7H,KAAKgD,MAAM8E,iBAC3B9H,KAAKkH,oBACRlH,KAAKkH,kBAAkBzD,SAASoC,MAAMlC,MAAQkE,GAE3C7H,KAAK4F,sBACR5F,KAAK4F,oBAAoBnC,SAASoC,MAAMlC,MAAQkE,GAOxC5G,Y,MACD,QAAR,EAAAjB,KAAKiD,WAAG,SAAEhB,UACVK,EAAcG,UAAUsF,OAAO,SAC/BxF,SAASW,KAAK8E,YAAY1F","sources":["webpack://tp_threejs/./src/ThreeJs/Shaders/FireFlies/fireFlies.fs.glsl","webpack://tp_threejs/./src/ThreeJs/Shaders/FireFlies/fireFlies.vs.glsl","webpack://tp_threejs/./src/ThreeJs/Shaders/Portal/portal.fs.glsl","webpack://tp_threejs/./src/ThreeJs/Shaders/Portal/portal.vs.glsl","webpack://tp_threejs/./src/ThreeJs/BaseApplication.ts","webpack://tp_threejs/./src/ThreeJs/Journey/BaseJourney.ts","webpack://tp_threejs/./src/ThreeJs/Journey/Journey35.ts"],"sourcesContent":["export default \"void main() {\\n    float distanceToCenter = distance(gl_PointCoord, vec2(0.5));\\n    float strength = 0.05 / distanceToCenter - 0.05 * 2.0;\\n    gl_FragColor = vec4(1.0, 1.0, 1.0, strength);\\n}\";","export default \"attribute float aScale;\\n\\nuniform float uPixelRatio;\\nuniform float uSize;\\nuniform float uTime;\\n\\nvoid main() {\\n    vec4 modelPosition = modelMatrix * vec4(position, 1.0);\\n    modelPosition.y += sin(uTime + modelPosition.x * 100.0) * aScale * 0.1;\\n\\n    vec4 viewPosition = viewMatrix * modelPosition;\\n    vec4 projectionPosition = projectionMatrix * viewPosition;\\n\\n    gl_Position = projectionPosition;\\n    // gl_PointSize = uSize * aScale;\\n    gl_PointSize = uSize * aScale * uPixelRatio;\\n    gl_PointSize *= (1.0 / -viewPosition.z);\\n}\";","export default \"uniform float uTime;\\nvarying vec2 vUv;\\nuniform vec3 uColorStart;\\nuniform vec3 uColorEnd;\\n\\n//    Classic Perlin 3D Noise \\n//    by Stefan Gustavson\\n//\\nvec4 permute(vec4 x) {\\n    return mod(((x * 34.0) + 1.0) * x, 289.0);\\n}\\nvec4 taylorInvSqrt(vec4 r) {\\n    return 1.79284291400159 - 0.85373472095314 * r;\\n}\\nvec3 fade(vec3 t) {\\n    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);\\n}\\n\\nfloat cnoise(vec3 P) {\\n    vec3 Pi0 = floor(P); // Integer part for indexing\\n    vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\\n    Pi0 = mod(Pi0, 289.0);\\n    Pi1 = mod(Pi1, 289.0);\\n    vec3 Pf0 = fract(P); // Fractional part for interpolation\\n    vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\\n    vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\\n    vec4 iy = vec4(Pi0.yy, Pi1.yy);\\n    vec4 iz0 = Pi0.zzzz;\\n    vec4 iz1 = Pi1.zzzz;\\n\\n    vec4 ixy = permute(permute(ix) + iy);\\n    vec4 ixy0 = permute(ixy + iz0);\\n    vec4 ixy1 = permute(ixy + iz1);\\n\\n    vec4 gx0 = ixy0 / 7.0;\\n    vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\\n    gx0 = fract(gx0);\\n    vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\\n    vec4 sz0 = step(gz0, vec4(0.0));\\n    gx0 -= sz0 * (step(0.0, gx0) - 0.5);\\n    gy0 -= sz0 * (step(0.0, gy0) - 0.5);\\n\\n    vec4 gx1 = ixy1 / 7.0;\\n    vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\\n    gx1 = fract(gx1);\\n    vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\\n    vec4 sz1 = step(gz1, vec4(0.0));\\n    gx1 -= sz1 * (step(0.0, gx1) - 0.5);\\n    gy1 -= sz1 * (step(0.0, gy1) - 0.5);\\n\\n    vec3 g000 = vec3(gx0.x, gy0.x, gz0.x);\\n    vec3 g100 = vec3(gx0.y, gy0.y, gz0.y);\\n    vec3 g010 = vec3(gx0.z, gy0.z, gz0.z);\\n    vec3 g110 = vec3(gx0.w, gy0.w, gz0.w);\\n    vec3 g001 = vec3(gx1.x, gy1.x, gz1.x);\\n    vec3 g101 = vec3(gx1.y, gy1.y, gz1.y);\\n    vec3 g011 = vec3(gx1.z, gy1.z, gz1.z);\\n    vec3 g111 = vec3(gx1.w, gy1.w, gz1.w);\\n\\n    vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\\n    g000 *= norm0.x;\\n    g010 *= norm0.y;\\n    g100 *= norm0.z;\\n    g110 *= norm0.w;\\n    vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\\n    g001 *= norm1.x;\\n    g011 *= norm1.y;\\n    g101 *= norm1.z;\\n    g111 *= norm1.w;\\n\\n    float n000 = dot(g000, Pf0);\\n    float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\\n    float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\\n    float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\\n    float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\\n    float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\\n    float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\\n    float n111 = dot(g111, Pf1);\\n\\n    vec3 fade_xyz = fade(Pf0);\\n    vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\\n    vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\\n    float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\\n\\n    return 2.2 * n_xyz;\\n}\\n\\nvoid main() {\\n     // Displace the UV\\n    vec2 displacedUv = vUv + cnoise(vec3(vUv * 5.0, uTime * 0.1));\\n\\n    // Perlin noise\\n    float strength = cnoise(vec3(displacedUv * 5.0, uTime * 0.2));\\n\\n    // Outer glow\\n    float outerGlow = distance(vUv, vec2(0.5)) * 1.0 - 1.4;\\n    strength += outerGlow;\\n\\n    // Apply cool step\\n    strength += step(-0.2, strength) * 0.8;\\n\\n    // // Clamp the value from 0 to 1\\n    // strength = clamp(strength, 0.0, 1.0);\\n\\n    // Final color\\n    vec3 color = mix(uColorStart, uColorEnd, strength);\\n\\n    gl_FragColor = vec4(color, 1.0);\\n}\";","export default \"varying vec2 vUv;\\n\\nvoid main() {\\n    vec4 modelPosition = modelMatrix * vec4(position, 1.0 );\\n    vec4 viewPosition = viewMatrix * modelPosition;\\n    vec4 projectionPosition = projectionMatrix * viewPosition;\\n\\n    gl_Position = projectionPosition;\\n\\n    vUv = uv;\\n}\";","import { Camera, PerspectiveCamera, Scene, Vector3, WebGLRenderer } from 'three';\nimport { STAGE } from './../Config';\n\n/**\n * 应用基类\n */\nexport class BaseApplication {\n\tpublic appId: string = '00';\n\tpublic appName: string = 'BASE';\n\tprotected width: number = STAGE.width;\n\tprotected height: number = STAGE.height;\n\tprotected canvas: HTMLCanvasElement = null;\n\n\tprotected scene: Scene;\n\tprotected camera: Camera;\n\tprotected renderer: WebGLRenderer;\n\tprotected viewCenter: Vector3 = new Vector3(0, 0, 0);\n\n\tpublic constructor(canvas: HTMLCanvasElement) {\n\t\tthis.canvas = canvas;\n\t}\n\n\t/**\n\t * @override 子类覆写\n\t */\n\tprotected initRender(): void {\n\t\tconst renderer = new WebGLRenderer({\n\t\t\tantialias: true, // 抗锯齿开启\n\t\t\tcanvas: this.canvas,\n\t\t});\n\t\trenderer.setSize(this.width, this.height); // 设置渲染器的宽度和高度\n\t\trenderer.setClearColor('#000000', 1.0); // 设置背景颜色\n\t\trenderer.setPixelRatio(window.devicePixelRatio); // 设置设备像素比\n\n\t\tthis.renderer = renderer;\n\t}\n\n\t/**\n\t * @override 子类覆写\n\t */\n\tprotected initScene(): void {\n\t\tconst scene = new Scene();\n\t\tthis.scene = scene;\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprotected initCamera(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t */\n\tprotected initLight(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t */\n\tprotected initModel(): void {}\n\n\t/**\n\t * @override 子类复写\n\t */\n\tprotected onCreating(): void {}\n\n\t/**\n\t * @override 子类复写\n\t */\n\tprotected onCreated(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t * 开始渲染\n\t */\n\tprotected onRender(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t * 开始销毁\n\t */\n\tprotected onDestroy(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t * 开始 resize\n\t */\n\tprotected onResize(): void {}\n\n\t/**\n\t * 创建后的调用\n\t */\n\tprivate create(): void {\n\t\tthis.onCreating();\n\t\tthis.initRender();\n\t\tthis.initScene();\n\t\tthis.initCamera();\n\t\tthis.initLight();\n\t\tthis.initModel();\n\t\tthis.onCreated();\n\t}\n\n\t/**\n\t * 渲染\n\t */\n\tprivate render(): void {\n\t\tthis.renderer?.clear();\n\t\tthis.onRender();\n\t\tthis.handle = requestAnimationFrame(this.render.bind(this));\n\t}\n\n\t/**\n\t * 开始执行\n\t */\n\tprivate handle: number = -1;\n\tpublic run(): void {\n\t\tthis.create();\n\t\tthis.render();\n\t}\n\n\t/**\n\t * 视口变化\n\t */\n\tpublic resize(): void {\n\t\t// update size\n\t\tthis.width = window.innerWidth;\n\t\tthis.height = window.innerHeight;\n\n\t\t// update camera\n\t\tif (this.camera && this.camera instanceof PerspectiveCamera) {\n\t\t\tthis.camera.aspect = this.width / this.height;\n\t\t\tthis.camera.updateProjectionMatrix();\n\t\t}\n\n\t\t// update renderer\n\t\tthis.renderer?.setSize(this.width, this.height);\n\t\tthis.renderer?.setPixelRatio(Math.min(2, window.devicePixelRatio));\n\n\t\tthis.onResize();\n\t}\n\n\t/**\n\t * @override 子类覆写\n\t * 销毁清理\n\t */\n\tpublic destroy(): void {\n\t\tthis.onDestroy();\n\n\t\tthis.scene.clear();\n\t\tthis.renderer.clear();\n\t\tcancelAnimationFrame(this.handle);\n\t\tconsole.log(`销毁应用【${this.appId} ${this.appName}】`);\n\t}\n}\n","import { BaseApplication } from '../BaseApplication';\n\nexport class BaseJourney extends BaseApplication {}\n","import * as dat from 'dat.gui';\nimport { gsap } from 'gsap';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport fireFliesFragmentShader from '../Shaders/FireFlies/fireFlies.fs.glsl';\nimport fireFliesVertexShader from '../Shaders/FireFlies/fireFlies.vs.glsl';\nimport portalFragmentShader from '../Shaders/Portal/portal.fs.glsl';\nimport portalVertexShader from '../Shaders/Portal/portal.vs.glsl';\nimport { BaseJourney } from './BaseJourney';\n\nconst loadingBarEle = document.createElement('div') as HTMLElement;\nloadingBarEle.classList.add('loading-bar');\n\n/**\n * Journey - journey_final\n */\n\nexport class Journey35 extends BaseJourney {\n\tprivate gui: dat.GUI;\n\tprivate clock: THREE.Clock;\n\tprivate controls: OrbitControls;\n\tprivate params: any;\n\n\t/**\n\t * @override\n\t */\n\tprotected onCreating(): void {\n\t\t// params\n\t\tthis.params = {\n\t\t\tclearColor: 0x191919,\n\t\t\tportalColorStart: 0xe6d0e6,\n\t\t\tportalColorEnd: 0x000000,\n\t\t};\n\n\t\t// clock\n\t\tthis.clock = new THREE.Clock();\n\n\t\t// GUI\n\t\tthis.gui = new dat.GUI();\n\n\t\tdocument.body.appendChild(loadingBarEle);\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprivate overlayPanel: THREE.Mesh;\n\tprotected onCreated(): void {\n\t\t// controller\n\t\tthis.controls = new OrbitControls(this.camera, this.canvas);\n\t\tthis.controls.enableDamping = true;\n\n\t\tthis.renderer.outputEncoding = THREE.sRGBEncoding;\n\t\t// this.renderer.toneMapping = THREE.ACESFilmicToneMapping;\n\n\t\t// loading\n\t\tconst overlayGeometry = new THREE.PlaneBufferGeometry(2, 2, 1, 1);\n\t\tconst overlayMaterial = new THREE.ShaderMaterial({\n\t\t\tuniforms: {\n\t\t\t\tuAlpha: { value: 1 },\n\t\t\t},\n\t\t\ttransparent: true,\n\t\t\tvertexShader: `\n                void main(){\n                    gl_Position = vec4(position, 1.0);\n                }\n            `,\n\t\t\tfragmentShader: `\n                uniform float uAlpha;\n                void main(){\n                    gl_FragColor = vec4(0.0, 0.0, 0.0, uAlpha);\n                }\n            `,\n\t\t});\n\t\tconst overlayMesh = new THREE.Mesh(overlayGeometry, overlayMaterial);\n\t\tthis.overlayPanel = overlayMesh;\n\t\tthis.scene.add(overlayMesh);\n\t}\n\n\t/**\n\t * @protected\n\t */\n\tprotected initLight(): void {\n\t\tconst directionalLight = new THREE.DirectionalLight(0xffffff, 3);\n\t\tdirectionalLight.position.set(0.25, 3, -2.25);\n\t\tdirectionalLight.shadow.mapSize.set(1024, 1024);\n\t\tdirectionalLight.castShadow = true;\n\t\tdirectionalLight.shadow.normalBias = 0.05;\n\t\tthis.scene.add(directionalLight);\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprotected initCamera(): void {\n\t\tconst camera = new THREE.PerspectiveCamera(75, this.width / this.height, 0.1, 100);\n\t\tcamera.position.set(3, 3, 3);\n\t\tthis.camera = camera;\n\t\tthis.scene.add(camera);\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprivate fireFliesMaterial: THREE.ShaderMaterial;\n\tprivate portalLightMaterial: THREE.ShaderMaterial;\n\tprotected initModel(): void {\n\t\tconst scene = this.scene;\n\t\tconst loadingMrg = new THREE.LoadingManager(\n\t\t\t// Loaded\n\t\t\t() => {\n\t\t\t\tgsap.delayedCall(0.5, () => {\n\t\t\t\t\tgsap.to((this.overlayPanel.material as THREE.ShaderMaterial).uniforms.uAlpha, { duration: 3, value: 0 });\n\t\t\t\t\tloadingBarEle.style.transform = '';\n\t\t\t\t\tloadingBarEle.classList.add('ended');\n\t\t\t\t\t// console.log('[RES] loaded');\n\t\t\t\t});\n\t\t\t},\n\t\t\t// progress\n\t\t\t(itemUrl, itemsLoaded, itemsTotal) => {\n\t\t\t\tconst progressRatio = itemsLoaded / itemsTotal;\n\t\t\t\tloadingBarEle.style.transform = `scaleX(${progressRatio})`;\n\t\t\t\t// console.log('[RES] progress :', itemsLoaded, itemsTotal);\n\t\t\t},\n\t\t);\n\n\t\tconst textureLoader = new THREE.TextureLoader(loadingMrg);\n\n\t\t// Draco loader\n\t\tconst dracoLoader = new DRACOLoader();\n\t\tdracoLoader.setDecoderPath('resource/draco/');\n\n\t\t// GLTF Loader\n\t\tconst gltfLoader = new GLTFLoader(loadingMrg);\n\t\tgltfLoader.setDRACOLoader(dracoLoader);\n\n\t\t// Texture\n\t\tconst bakeTexture = textureLoader.load('./resource/journey/models/Journey_final/journey_final_baked.jpg');\n\t\tbakeTexture.flipY = false;\n\t\tbakeTexture.encoding = THREE.sRGBEncoding;\n\n\t\t/** Material */\n\t\tconst bakeMaterial = new THREE.MeshBasicMaterial({ map: bakeTexture });\n\n\t\tconst portalLightMaterial = new THREE.ShaderMaterial({\n\t\t\tuniforms: {\n\t\t\t\tuTime: { value: 0 },\n\t\t\t\tuColorStart: { value: new THREE.Color(this.params.portalColorStart) },\n\t\t\t\tuColorEnd: { value: new THREE.Color(this.params.portalColorEnd) },\n\t\t\t},\n\t\t\tvertexShader: portalVertexShader,\n\t\t\tfragmentShader: portalFragmentShader,\n\t\t});\n\t\tthis.portalLightMaterial = portalLightMaterial;\n\n\t\tconst poleLightMaterial = new THREE.MeshBasicMaterial({ color: 0xffffe5 });\n\n\t\t// Model\n\t\tgltfLoader.load('./resource/journey/models/Journey_final/journey_final.glb', gltf => {\n\t\t\tconst model = gltf.scene;\n\t\t\t// model.traverse((child: THREE.Mesh) => {\n\t\t\t// \tchild.material = bakeMaterial;\n\t\t\t// });\n\t\t\tconst bakeMesh = gltf.scene.children.find(child => child.name === 'baked') as THREE.Mesh;\n\t\t\tbakeMesh.material = bakeMaterial;\n\n\t\t\tconst poleLightAMesh = gltf.scene.children.find(child => child.name === 'poleLightA') as THREE.Mesh;\n\t\t\tconst poleLightBMesh = gltf.scene.children.find(child => child.name === 'poleLightB') as THREE.Mesh;\n\t\t\tpoleLightAMesh.material = poleLightBMesh.material = poleLightMaterial;\n\n\t\t\tconst poleLightMesh = gltf.scene.children.find(child => child.name === 'poleLight') as THREE.Mesh;\n\t\t\tpoleLightMesh.material = portalLightMaterial;\n\t\t\t// model.rotation.y = -Math.PI * 0.5;\n\n\t\t\tscene.add(model);\n\t\t});\n\n\t\t// fireFly\n\t\tconst fireFliesGeometry = new THREE.BufferGeometry();\n\t\tconst fireFliesCount = 50;\n\t\tconst positionArray = new Float32Array(fireFliesCount * 3);\n\t\tconst scaleArray = new Float32Array(fireFliesCount);\n\t\tfor (let i = 0; i < fireFliesCount; i++) {\n\t\t\tpositionArray[i * 3 + 0] = (Math.random() - 0.5) * 4;\n\t\t\tpositionArray[i * 3 + 1] = (Math.random() - 0.1) * 2;\n\t\t\tpositionArray[i * 3 + 2] = (Math.random() - 0.5) * 4;\n\n\t\t\tscaleArray[i] = Math.random();\n\t\t}\n\t\tfireFliesGeometry.setAttribute('position', new THREE.BufferAttribute(positionArray, 3));\n\t\tfireFliesGeometry.setAttribute('aScale', new THREE.BufferAttribute(scaleArray, 1));\n\n\t\tconst fireFliesMaterial = new THREE.ShaderMaterial({\n\t\t\tuniforms: {\n\t\t\t\tuPixelRatio: { value: Math.min(window.devicePixelRatio, 1) },\n\t\t\t\tuSize: { value: 40 },\n\t\t\t\tuTime: { value: 0 },\n\t\t\t},\n\t\t\tvertexShader: fireFliesVertexShader,\n\t\t\tfragmentShader: fireFliesFragmentShader,\n\t\t\tblending: THREE.AdditiveBlending,\n\t\t\tdepthWrite: false,\n\t\t\ttransparent: true,\n\t\t});\n\t\tconst fireFilesMesh = new THREE.Points(fireFliesGeometry, fireFliesMaterial);\n\t\tscene.add(fireFilesMesh);\n\n\t\tthis.fireFliesMaterial = fireFliesMaterial;\n\n\t\t// DEBUG\n\t\tthis.gui.add(fireFliesMaterial.uniforms.uSize, 'value').step(1).min(5).max(100);\n\t\tthis.gui.addColor(this.params, 'portalColorStart').onChange(() => {\n\t\t\tportalLightMaterial.uniforms.uColorStart.value.set(this.params.portalColorStart);\n\t\t});\n\t\tthis.gui.addColor(this.params, 'portalColorEnd').onChange(() => {\n\t\t\tportalLightMaterial.uniforms.uColorEnd.value.set(this.params.portalColorEnd);\n\t\t});\n\t}\n\n\tprotected onResize(): void {\n\t\tif (this.fireFliesMaterial) this.fireFliesMaterial.uniforms.uPixelRatio.value = Math.min(window.devicePixelRatio, 1);\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprotected onRender(): void {\n\t\tthis.controls.update();\n\t\tthis.renderer.render(this.scene, this.camera);\n\n\t\tconst elapsedTime = this.clock.getElapsedTime();\n\t\tif (this.fireFliesMaterial) {\n\t\t\tthis.fireFliesMaterial.uniforms.uTime.value = elapsedTime;\n\t\t}\n\t\tif (this.portalLightMaterial) {\n\t\t\tthis.portalLightMaterial.uniforms.uTime.value = elapsedTime;\n\t\t}\n\t}\n\n\t/**\n\t * @protected\n\t */\n\tprotected onDestroy(): void {\n\t\tthis.gui?.destroy();\n\t\tloadingBarEle.classList.remove('ended');\n\t\tdocument.body.removeChild(loadingBarEle);\n\t}\n}\n"],"names":["BaseApplication","canvas","appId","appName","width","height","viewCenter","handle","this","initRender","renderer","antialias","setSize","setClearColor","setPixelRatio","window","devicePixelRatio","initScene","scene","initCamera","initLight","initModel","onCreating","onCreated","onRender","onDestroy","onResize","create","render","clear","requestAnimationFrame","bind","run","resize","innerWidth","innerHeight","camera","aspect","updateProjectionMatrix","Math","min","destroy","cancelAnimationFrame","console","log","BaseJourney","loadingBarEle","document","createElement","classList","add","Journey35","params","clearColor","portalColorStart","portalColorEnd","clock","gui","body","appendChild","controls","enableDamping","outputEncoding","overlayGeometry","overlayMaterial","uniforms","uAlpha","value","transparent","vertexShader","fragmentShader","overlayMesh","overlayPanel","directionalLight","position","set","shadow","mapSize","castShadow","normalBias","loadingMrg","material","duration","style","transform","itemUrl","itemsLoaded","itemsTotal","progressRatio","textureLoader","dracoLoader","setDecoderPath","gltfLoader","setDRACOLoader","bakeTexture","load","flipY","encoding","bakeMaterial","map","portalLightMaterial","uTime","uColorStart","uColorEnd","poleLightMaterial","color","gltf","model","children","find","child","name","poleLightAMesh","poleLightBMesh","fireFliesGeometry","positionArray","Float32Array","fireFliesCount","scaleArray","i","random","setAttribute","fireFliesMaterial","uPixelRatio","uSize","blending","depthWrite","fireFilesMesh","step","max","addColor","onChange","update","elapsedTime","getElapsedTime","remove","removeChild"],"sourceRoot":""}