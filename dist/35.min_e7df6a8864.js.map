{"version":3,"file":"35.min_e7df6a8864.js","mappings":"iJAMO,MAAMA,EAYZ,YAAmBC,GAXZ,KAAAC,MAAgB,KAChB,KAAAC,QAAkB,OACf,KAAAC,MAAgB,UAChB,KAAAC,OAAiB,WACjB,KAAAJ,OAA4B,KAK5B,KAAAK,WAAsB,IAAI,KAAQ,EAAG,EAAG,GAiG1C,KAAAC,QAAkB,EA9FzBC,KAAKP,OAASA,EAMLQ,aACT,MAAMC,EAAW,IAAI,KAAc,CAClCC,WAAW,EACXV,OAAQO,KAAKP,SAEdS,EAASE,QAAQJ,KAAKJ,MAAOI,KAAKH,QAClCK,EAASG,cAAc,UAAW,GAClCH,EAASI,cAAcC,OAAOC,kBAE9BR,KAAKE,SAAWA,EAMPO,YACT,MAAMC,EAAQ,IAAI,KAClBV,KAAKU,MAAQA,EAMJC,cAKAC,aAKAC,aAKAC,cAKAC,aAMAC,YAMAC,aAMAC,YAKFC,SACPnB,KAAKc,aACLd,KAAKC,aACLD,KAAKS,YACLT,KAAKW,aACLX,KAAKY,YACLZ,KAAKa,YACLb,KAAKe,YAMEK,S,MACM,QAAb,EAAApB,KAAKE,gBAAQ,SAAEmB,QACfrB,KAAKgB,WACLhB,KAAKD,OAASuB,sBAAsBtB,KAAKoB,OAAOG,KAAKvB,OAO/CwB,MACNxB,KAAKmB,SACLnB,KAAKoB,SAMCK,S,QAENzB,KAAKJ,MAAQW,OAAOmB,WACpB1B,KAAKH,OAASU,OAAOoB,YAGjB3B,KAAK4B,QAAU5B,KAAK4B,kBAAkB,OACzC5B,KAAK4B,OAAOC,OAAS7B,KAAKJ,MAAQI,KAAKH,OACvCG,KAAK4B,OAAOE,0BAIA,QAAb,EAAA9B,KAAKE,gBAAQ,SAAEE,QAAQJ,KAAKJ,MAAOI,KAAKH,QAC3B,QAAb,EAAAG,KAAKE,gBAAQ,SAAEI,cAAcyB,KAAKC,IAAI,EAAGzB,OAAOC,mBAEhDR,KAAKkB,WAOCe,UACNjC,KAAKiB,YAELjB,KAAKU,MAAMW,QACXrB,KAAKE,SAASmB,QACda,qBAAqBlC,KAAKD,QAC1BoC,QAAQC,IAAI,QAAQpC,KAAKN,SAASM,KAAKL,e,8DCpJlC,MAAM0C,UAAoB,O,2FCO1B,MAAMC,UAAkB,EAAAD,YAMpBvB,aAETd,KAAKuC,MAAQ,IAAI,IAGjBvC,KAAKwC,IAAM,IAAI,IAQNzB,YAETf,KAAKyC,SAAW,IAAI,IAAczC,KAAK4B,OAAQ5B,KAAKP,QAEpDO,KAAKyC,SAASC,eAAgB,EAO9B,MAAMC,EAAY,IAAI,KACtB3C,KAAK4C,UAAYD,EAGjB,MAAME,EAAQ,IAAI,MAAe,EAAG,GACpC7C,KAAK6C,MAAQA,EAGbtC,OAAOuC,iBAAiB,aAAaC,IACpCF,EAAMG,EAAKD,EAAMC,EAAIhD,KAAKJ,MAAS,EAAI,EACvCiD,EAAMI,GAAMF,EAAME,EAAIjD,KAAKH,OAAU,EAAI,KAI1CU,OAAOuC,iBAAiB,aAAa,K,OACd,QAAjB,EAAA9C,KAAKkD,oBAAY,eAAEC,SACxBnD,KAAKkD,aAAaC,OAAiB,SAAS,MAAEC,IAAI,UAGnD7C,OAAOuC,iBAAiB,WAAW,K,OACZ,QAAjB,EAAA9C,KAAKkD,oBAAY,eAAEC,SACxBnD,KAAKkD,aAAaC,OAAiB,SAAS,MAAEC,IAAI,aAS1CzC,aACT,MAAMiB,EAAS,IAAI,KAAwB,GAAI5B,KAAKJ,MAAQI,KAAKH,QACjE+B,EAAOyB,SAASD,IAAI,EAAG,EAAG,GAC1BxB,EAAO0B,OAAO,IAAI,KAAc,EAAG,EAAG,IAEtCtD,KAAK4B,OAASA,EACd5B,KAAKU,MAAM6C,IAAI3B,GAQNf,YACT,MAAM2C,EAAU,IAAI,KACnB,IAAI,KAA2B,GAAK,GAAI,IACxC,IAAI,KAAwB,CAAEC,MAAO,YAEtCD,EAAQH,SAASL,GAAK,EAEtB,MAAMU,EAAU,IAAI,KACnB,IAAI,KAA2B,GAAK,GAAI,IACxC,IAAI,KAAwB,CAAED,MAAO,YAGhCE,EAAU,IAAI,KACnB,IAAI,KAA2B,GAAK,GAAI,IACxC,IAAI,KAAwB,CAAEF,MAAO,YAEtCE,EAAQN,SAASL,EAAI,EAErBhD,KAAK4D,QAAU,CAACJ,EAASE,EAASC,GAClC3D,KAAKU,MAAM6C,IAAIC,EAASE,EAASC,GAMxB3C,WACThB,KAAKyC,SAASoB,SACd7D,KAAKE,SAASkB,OAAOpB,KAAKU,MAAOV,KAAK4B,QAGtC,MAAMkC,EAAc9D,KAAKuC,MAAMwB,iBAC/B/D,KAAK4D,QAAQI,SAAQ,CAACb,EAAQc,KAC7Bd,EAAOE,SAASJ,EAAIlB,KAAKmC,IAAIJ,GAAe,KAAQG,OAQrDjE,KAAK4C,UAAUuB,cAAcnE,KAAK6C,MAAO7C,KAAK4B,QAE9C,MAAMwC,EAAapE,KAAK4C,UAAUyB,iBAAiBrE,KAAK4D,SAEpDQ,EAAWE,OACdtE,KAAKkD,aAAekB,EAAW,GAE/BpE,KAAKkD,aAAe,KAgBZjC,Y,MACD,QAAR,EAAAjB,KAAKwC,WAAG,SAAEP","sources":["webpack://tp_threejs/./src/ThreeJs/BaseApplication.ts","webpack://tp_threejs/./src/ThreeJs/Journey/BaseJourney.ts","webpack://tp_threejs/./src/ThreeJs/Journey/Journey20.ts"],"sourcesContent":["import { Camera, PerspectiveCamera, Scene, Vector3, WebGLRenderer } from 'three';\nimport { STAGE } from './../Config';\n\n/**\n * 应用基类\n */\nexport class BaseApplication {\n\tpublic appId: string = '00';\n\tpublic appName: string = 'BASE';\n\tprotected width: number = STAGE.width;\n\tprotected height: number = STAGE.height;\n\tprotected canvas: HTMLCanvasElement = null;\n\n\tprotected scene: Scene;\n\tprotected camera: Camera;\n\tprotected renderer: WebGLRenderer;\n\tprotected viewCenter: Vector3 = new Vector3(0, 0, 0);\n\n\tpublic constructor(canvas: HTMLCanvasElement) {\n\t\tthis.canvas = canvas;\n\t}\n\n\t/**\n\t * @override 子类覆写\n\t */\n\tprotected initRender(): void {\n\t\tconst renderer = new WebGLRenderer({\n\t\t\tantialias: true, // 抗锯齿开启\n\t\t\tcanvas: this.canvas,\n\t\t});\n\t\trenderer.setSize(this.width, this.height); // 设置渲染器的宽度和高度\n\t\trenderer.setClearColor('#000000', 1.0); // 设置背景颜色\n\t\trenderer.setPixelRatio(window.devicePixelRatio); // 设置设备像素比\n\n\t\tthis.renderer = renderer;\n\t}\n\n\t/**\n\t * @override 子类覆写\n\t */\n\tprotected initScene(): void {\n\t\tconst scene = new Scene();\n\t\tthis.scene = scene;\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprotected initCamera(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t */\n\tprotected initLight(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t */\n\tprotected initModel(): void {}\n\n\t/**\n\t * @override 子类复写\n\t */\n\tprotected onCreating(): void {}\n\n\t/**\n\t * @override 子类复写\n\t */\n\tprotected onCreated(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t * 开始渲染\n\t */\n\tprotected onRender(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t * 开始销毁\n\t */\n\tprotected onDestroy(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t * 开始 resize\n\t */\n\tprotected onResize(): void {}\n\n\t/**\n\t * 创建后的调用\n\t */\n\tprivate create(): void {\n\t\tthis.onCreating();\n\t\tthis.initRender();\n\t\tthis.initScene();\n\t\tthis.initCamera();\n\t\tthis.initLight();\n\t\tthis.initModel();\n\t\tthis.onCreated();\n\t}\n\n\t/**\n\t * 渲染\n\t */\n\tprivate render(): void {\n\t\tthis.renderer?.clear();\n\t\tthis.onRender();\n\t\tthis.handle = requestAnimationFrame(this.render.bind(this));\n\t}\n\n\t/**\n\t * 开始执行\n\t */\n\tprivate handle: number = -1;\n\tpublic run(): void {\n\t\tthis.create();\n\t\tthis.render();\n\t}\n\n\t/**\n\t * 视口变化\n\t */\n\tpublic resize(): void {\n\t\t// update size\n\t\tthis.width = window.innerWidth;\n\t\tthis.height = window.innerHeight;\n\n\t\t// update camera\n\t\tif (this.camera && this.camera instanceof PerspectiveCamera) {\n\t\t\tthis.camera.aspect = this.width / this.height;\n\t\t\tthis.camera.updateProjectionMatrix();\n\t\t}\n\n\t\t// update renderer\n\t\tthis.renderer?.setSize(this.width, this.height);\n\t\tthis.renderer?.setPixelRatio(Math.min(2, window.devicePixelRatio));\n\n\t\tthis.onResize();\n\t}\n\n\t/**\n\t * @override 子类覆写\n\t * 销毁清理\n\t */\n\tpublic destroy(): void {\n\t\tthis.onDestroy();\n\n\t\tthis.scene.clear();\n\t\tthis.renderer.clear();\n\t\tcancelAnimationFrame(this.handle);\n\t\tconsole.log(`销毁应用【${this.appId} ${this.appName}】`);\n\t}\n}\n","import { BaseApplication } from '../BaseApplication';\n\nexport class BaseJourney extends BaseApplication {}\n","import * as dat from 'dat.gui';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { BaseJourney } from './BaseJourney';\n\n/**\n * Journey - RayCaster\n */\n\nexport class Journey20 extends BaseJourney {\n\tprivate gui: dat.GUI;\n\tprivate clock: THREE.Clock;\n\t/**\n\t * @override\n\t */\n\tprotected onCreating(): void {\n\t\t// clock\n\t\tthis.clock = new THREE.Clock();\n\n\t\t// GUI\n\t\tthis.gui = new dat.GUI();\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprivate mouse: THREE.Vector2;\n\tprivate rayCaster: THREE.Raycaster;\n\tprotected onCreated(): void {\n\t\t// camera controller\n\t\tthis.controls = new OrbitControls(this.camera, this.canvas);\n\t\t// this.controls.autoRotate = true;\n\t\tthis.controls.enableDamping = true;\n\n\t\t// axes\n\t\t// const axesHelp = new THREE.AxesHelper(10);\n\t\t// this.scene.add(axesHelp);\n\n\t\t// rayCaster\n\t\tconst raycaster = new THREE.Raycaster();\n\t\tthis.rayCaster = raycaster;\n\n\t\t// mouse\n\t\tconst mouse = new THREE.Vector2(-2, 2);\n\t\tthis.mouse = mouse;\n\n\t\t// mouse event\n\t\twindow.addEventListener('mousemove', event => {\n\t\t\tmouse.x = (event.x / this.width) * 2 - 1;\n\t\t\tmouse.y = -(event.y / this.height) * 2 + 1;\n\t\t});\n\n\t\t// click event\n\t\twindow.addEventListener('mousedown', () => {\n\t\t\tif (!this.curIntersect?.object) return;\n\t\t\tthis.curIntersect.object['material']['color'].set(0x00ff00);\n\t\t});\n\n\t\twindow.addEventListener('mouseup', () => {\n\t\t\tif (!this.curIntersect?.object) return;\n\t\t\tthis.curIntersect.object['material']['color'].set(0xff0000);\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\n\tprivate controls: OrbitControls;\n\tprotected initCamera(): void {\n\t\tconst camera = new THREE.PerspectiveCamera(75, this.width / this.height);\n\t\tcamera.position.set(0, 0, 4);\n\t\tcamera.lookAt(new THREE.Vector3(0, 0, 0));\n\n\t\tthis.camera = camera;\n\t\tthis.scene.add(camera);\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprivate curIntersect: THREE.Intersection;\n\tprivate objects: THREE.Mesh[];\n\tprotected initModel(): void {\n\t\tconst object1 = new THREE.Mesh(\n\t\t\tnew THREE.SphereBufferGeometry(0.5, 16, 16), //\n\t\t\tnew THREE.MeshBasicMaterial({ color: 0xff0000 }),\n\t\t);\n\t\tobject1.position.x = -2;\n\n\t\tconst object2 = new THREE.Mesh(\n\t\t\tnew THREE.SphereBufferGeometry(0.5, 16, 16), //\n\t\t\tnew THREE.MeshBasicMaterial({ color: 0xff0000 }),\n\t\t);\n\n\t\tconst object3 = new THREE.Mesh(\n\t\t\tnew THREE.SphereBufferGeometry(0.5, 16, 16), //\n\t\t\tnew THREE.MeshBasicMaterial({ color: 0xff0000 }),\n\t\t);\n\t\tobject3.position.x = 2;\n\n\t\tthis.objects = [object1, object2, object3];\n\t\tthis.scene.add(object1, object2, object3);\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprotected onRender(): void {\n\t\tthis.controls.update();\n\t\tthis.renderer.render(this.scene, this.camera);\n\n\t\t// animation\n\t\tconst elapsedTime = this.clock.getElapsedTime();\n\t\tthis.objects.forEach((object, index) => {\n\t\t\tobject.position.y = Math.sin(elapsedTime * (0.4 * ++index));\n\t\t});\n\n\t\t// const rayorigin = new THREE.Vector3(-3, 0, 0);\n\t\t// const rayDirection = new THREE.Vector3(1, 0, 0);\n\t\t// rayDirection.normalize();\n\t\t// this.rayCaster.set(rayorigin, rayDirection);\n\n\t\tthis.rayCaster.setFromCamera(this.mouse, this.camera);\n\n\t\tconst intersects = this.rayCaster.intersectObjects(this.objects);\n\n\t\tif (intersects.length) {\n\t\t\tthis.curIntersect = intersects[0];\n\t\t} else {\n\t\t\tthis.curIntersect = null;\n\t\t}\n\n\t\t// for (let object of this.objects) {\n\t\t// \tobject.material['color'].set(0xff0000);\n\t\t// }\n\n\t\t// for (let intersect of intersects) {\n\t\t// \tconst object = intersect.object as THREE.Mesh;\n\t\t// \tobject.material['color'].set(0x00ff00);\n\t\t// }\n\t}\n\n\t/**\n\t * @protected\n\t */\n\tprotected onDestroy(): void {\n\t\tthis.gui?.destroy();\n\t}\n}\n"],"names":["BaseApplication","canvas","appId","appName","width","height","viewCenter","handle","this","initRender","renderer","antialias","setSize","setClearColor","setPixelRatio","window","devicePixelRatio","initScene","scene","initCamera","initLight","initModel","onCreating","onCreated","onRender","onDestroy","onResize","create","render","clear","requestAnimationFrame","bind","run","resize","innerWidth","innerHeight","camera","aspect","updateProjectionMatrix","Math","min","destroy","cancelAnimationFrame","console","log","BaseJourney","Journey20","clock","gui","controls","enableDamping","raycaster","rayCaster","mouse","addEventListener","event","x","y","curIntersect","object","set","position","lookAt","add","object1","color","object2","object3","objects","update","elapsedTime","getElapsedTime","forEach","index","sin","setFromCamera","intersects","intersectObjects","length"],"sourceRoot":""}