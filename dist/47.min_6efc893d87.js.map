{"version":3,"file":"47.min_6efc893d87.js","mappings":"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","sources":["webpack://tp_threejs/./node_modules/three/examples/jsm/shaders/DotScreenShader.js","webpack://tp_threejs/./node_modules/three/examples/jsm/postprocessing/DotScreenPass.js","webpack://tp_threejs/./node_modules/three/examples/jsm/shaders/CopyShader.js","webpack://tp_threejs/./node_modules/three/examples/jsm/postprocessing/MaskPass.js","webpack://tp_threejs/./node_modules/three/examples/jsm/postprocessing/EffectComposer.js","webpack://tp_threejs/./node_modules/three/examples/jsm/shaders/DigitalGlitch.js","webpack://tp_threejs/./node_modules/three/examples/jsm/postprocessing/GlitchPass.js","webpack://tp_threejs/./node_modules/three/examples/jsm/postprocessing/Pass.js","webpack://tp_threejs/./node_modules/three/examples/jsm/postprocessing/RenderPass.js","webpack://tp_threejs/./node_modules/three/examples/jsm/postprocessing/ShaderPass.js","webpack://tp_threejs/./node_modules/three/examples/jsm/shaders/RGBShiftShader.js"],"sourcesContent":["import {\n\tVector2\n} from 'three';\n\n/**\n * Dot screen shader\n * based on glfx.js sepia shader\n * https://github.com/evanw/glfx.js\n */\n\nconst DotScreenShader = {\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'tSize': { value: new Vector2( 256, 256 ) },\n\t\t'center': { value: new Vector2( 0.5, 0.5 ) },\n\t\t'angle': { value: 1.57 },\n\t\t'scale': { value: 1.0 }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform vec2 center;\n\t\tuniform float angle;\n\t\tuniform float scale;\n\t\tuniform vec2 tSize;\n\n\t\tuniform sampler2D tDiffuse;\n\n\t\tvarying vec2 vUv;\n\n\t\tfloat pattern() {\n\n\t\t\tfloat s = sin( angle ), c = cos( angle );\n\n\t\t\tvec2 tex = vUv * tSize - center;\n\t\t\tvec2 point = vec2( c * tex.x - s * tex.y, s * tex.x + c * tex.y ) * scale;\n\n\t\t\treturn ( sin( point.x ) * sin( point.y ) ) * 4.0;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvec4 color = texture2D( tDiffuse, vUv );\n\n\t\t\tfloat average = ( color.r + color.g + color.b ) / 3.0;\n\n\t\t\tgl_FragColor = vec4( vec3( average * 10.0 - 5.0 + pattern() ), color.a );\n\n\t\t}`\n\n};\n\nexport { DotScreenShader };\n","import {\n\tShaderMaterial,\n\tUniformsUtils\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { DotScreenShader } from '../shaders/DotScreenShader.js';\n\nclass DotScreenPass extends Pass {\n\n\tconstructor( center, angle, scale ) {\n\n\t\tsuper();\n\n\t\tif ( DotScreenShader === undefined ) console.error( 'THREE.DotScreenPass relies on DotScreenShader' );\n\n\t\tvar shader = DotScreenShader;\n\n\t\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\tif ( center !== undefined ) this.uniforms[ 'center' ].value.copy( center );\n\t\tif ( angle !== undefined ) this.uniforms[ 'angle' ].value = angle;\n\t\tif ( scale !== undefined ) this.uniforms[ 'scale' ].value = scale;\n\n\t\tthis.material = new ShaderMaterial( {\n\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t} );\n\n\t\tthis.fsQuad = new FullScreenQuad( this.material );\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tthis.uniforms[ 'tDiffuse' ].value = readBuffer.texture;\n\t\tthis.uniforms[ 'tSize' ].value.set( readBuffer.width, readBuffer.height );\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\tif ( this.clear ) renderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n}\n\nexport { DotScreenPass };\n","/**\n * Full-screen textured quad shader\n */\n\nvar CopyShader = {\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'opacity': { value: 1.0 }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform float opacity;\n\n\t\tuniform sampler2D tDiffuse;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\n\t\t\tgl_FragColor = opacity * texel;\n\n\t\t}`\n\n};\n\nexport { CopyShader };\n","import { Pass } from './Pass.js';\n\nclass MaskPass extends Pass {\n\n\tconstructor( scene, camera ) {\n\n\t\tsuper();\n\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tthis.clear = true;\n\t\tthis.needsSwap = false;\n\n\t\tthis.inverse = false;\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tconst context = renderer.getContext();\n\t\tconst state = renderer.state;\n\n\t\t// don't update color or depth\n\n\t\tstate.buffers.color.setMask( false );\n\t\tstate.buffers.depth.setMask( false );\n\n\t\t// lock buffers\n\n\t\tstate.buffers.color.setLocked( true );\n\t\tstate.buffers.depth.setLocked( true );\n\n\t\t// set up stencil\n\n\t\tlet writeValue, clearValue;\n\n\t\tif ( this.inverse ) {\n\n\t\t\twriteValue = 0;\n\t\t\tclearValue = 1;\n\n\t\t} else {\n\n\t\t\twriteValue = 1;\n\t\t\tclearValue = 0;\n\n\t\t}\n\n\t\tstate.buffers.stencil.setTest( true );\n\t\tstate.buffers.stencil.setOp( context.REPLACE, context.REPLACE, context.REPLACE );\n\t\tstate.buffers.stencil.setFunc( context.ALWAYS, writeValue, 0xffffffff );\n\t\tstate.buffers.stencil.setClear( clearValue );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t\t// draw into the stencil buffer\n\n\t\trenderer.setRenderTarget( readBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\trenderer.setRenderTarget( writeBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\t// unlock color and depth buffer for subsequent rendering\n\n\t\tstate.buffers.color.setLocked( false );\n\t\tstate.buffers.depth.setLocked( false );\n\n\t\t// only render where stencil is set to 1\n\n\t\tstate.buffers.stencil.setLocked( false );\n\t\tstate.buffers.stencil.setFunc( context.EQUAL, 1, 0xffffffff ); // draw if == 1\n\t\tstate.buffers.stencil.setOp( context.KEEP, context.KEEP, context.KEEP );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t}\n\n}\n\nclass ClearMaskPass extends Pass {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.needsSwap = false;\n\n\t}\n\n\trender( renderer /*, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\trenderer.state.buffers.stencil.setLocked( false );\n\t\trenderer.state.buffers.stencil.setTest( false );\n\n\t}\n\n}\n\nexport { MaskPass, ClearMaskPass };\n","import {\n\tBufferGeometry,\n\tClock,\n\tFloat32BufferAttribute,\n\tLinearFilter,\n\tMesh,\n\tOrthographicCamera,\n\tRGBAFormat,\n\tVector2,\n\tWebGLRenderTarget\n} from 'three';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { ShaderPass } from './ShaderPass.js';\nimport { MaskPass } from './MaskPass.js';\nimport { ClearMaskPass } from './MaskPass.js';\n\nclass EffectComposer {\n\n\tconstructor( renderer, renderTarget ) {\n\n\t\tthis.renderer = renderer;\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tconst parameters = {\n\t\t\t\tminFilter: LinearFilter,\n\t\t\t\tmagFilter: LinearFilter,\n\t\t\t\tformat: RGBAFormat\n\t\t\t};\n\n\t\t\tconst size = renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = new WebGLRenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio, parameters );\n\t\t\trenderTarget.texture.name = 'EffectComposer.rt1';\n\n\t\t} else {\n\n\t\t\tthis._pixelRatio = 1;\n\t\t\tthis._width = renderTarget.width;\n\t\t\tthis._height = renderTarget.height;\n\n\t\t}\n\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\t\tthis.renderTarget2.texture.name = 'EffectComposer.rt2';\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t\tthis.renderToScreen = true;\n\n\t\tthis.passes = [];\n\n\t\t// dependencies\n\n\t\tif ( CopyShader === undefined ) {\n\n\t\t\tconsole.error( 'THREE.EffectComposer relies on CopyShader' );\n\n\t\t}\n\n\t\tif ( ShaderPass === undefined ) {\n\n\t\t\tconsole.error( 'THREE.EffectComposer relies on ShaderPass' );\n\n\t\t}\n\n\t\tthis.copyPass = new ShaderPass( CopyShader );\n\n\t\tthis.clock = new Clock();\n\n\t}\n\n\tswapBuffers() {\n\n\t\tconst tmp = this.readBuffer;\n\t\tthis.readBuffer = this.writeBuffer;\n\t\tthis.writeBuffer = tmp;\n\n\t}\n\n\taddPass( pass ) {\n\n\t\tthis.passes.push( pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t}\n\n\tinsertPass( pass, index ) {\n\n\t\tthis.passes.splice( index, 0, pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t}\n\n\tremovePass( pass ) {\n\n\t\tconst index = this.passes.indexOf( pass );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tthis.passes.splice( index, 1 );\n\n\t\t}\n\n\t}\n\n\tisLastEnabledPass( passIndex ) {\n\n\t\tfor ( let i = passIndex + 1; i < this.passes.length; i ++ ) {\n\n\t\t\tif ( this.passes[ i ].enabled ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\trender( deltaTime ) {\n\n\t\t// deltaTime value is in seconds\n\n\t\tif ( deltaTime === undefined ) {\n\n\t\t\tdeltaTime = this.clock.getDelta();\n\n\t\t}\n\n\t\tconst currentRenderTarget = this.renderer.getRenderTarget();\n\n\t\tlet maskActive = false;\n\n\t\tfor ( let i = 0, il = this.passes.length; i < il; i ++ ) {\n\n\t\t\tconst pass = this.passes[ i ];\n\n\t\t\tif ( pass.enabled === false ) continue;\n\n\t\t\tpass.renderToScreen = ( this.renderToScreen && this.isLastEnabledPass( i ) );\n\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive );\n\n\t\t\tif ( pass.needsSwap ) {\n\n\t\t\t\tif ( maskActive ) {\n\n\t\t\t\t\tconst context = this.renderer.getContext();\n\t\t\t\t\tconst stencil = this.renderer.state.buffers.stencil;\n\n\t\t\t\t\t//context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime );\n\n\t\t\t\t\t//context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.EQUAL, 1, 0xffffffff );\n\n\t\t\t\t}\n\n\t\t\t\tthis.swapBuffers();\n\n\t\t\t}\n\n\t\t\tif ( MaskPass !== undefined ) {\n\n\t\t\t\tif ( pass instanceof MaskPass ) {\n\n\t\t\t\t\tmaskActive = true;\n\n\t\t\t\t} else if ( pass instanceof ClearMaskPass ) {\n\n\t\t\t\t\tmaskActive = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.renderer.setRenderTarget( currentRenderTarget );\n\n\t}\n\n\treset( renderTarget ) {\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tconst size = this.renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = this.renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = this.renderTarget1.clone();\n\t\t\trenderTarget.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t\t}\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tconst effectiveWidth = this._width * this._pixelRatio;\n\t\tconst effectiveHeight = this._height * this._pixelRatio;\n\n\t\tthis.renderTarget1.setSize( effectiveWidth, effectiveHeight );\n\t\tthis.renderTarget2.setSize( effectiveWidth, effectiveHeight );\n\n\t\tfor ( let i = 0; i < this.passes.length; i ++ ) {\n\n\t\t\tthis.passes[ i ].setSize( effectiveWidth, effectiveHeight );\n\n\t\t}\n\n\t}\n\n\tsetPixelRatio( pixelRatio ) {\n\n\t\tthis._pixelRatio = pixelRatio;\n\n\t\tthis.setSize( this._width, this._height );\n\n\t}\n\n}\n\n\nclass Pass {\n\n\tconstructor() {\n\n\t\t// if set to true, the pass is processed by the composer\n\t\tthis.enabled = true;\n\n\t\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\t\tthis.needsSwap = true;\n\n\t\t// if set to true, the pass clears its buffer before rendering\n\t\tthis.clear = false;\n\n\t\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\t\tthis.renderToScreen = false;\n\n\t}\n\n\tsetSize( /* width, height */ ) {}\n\n\trender( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nconst _geometry = new BufferGeometry();\n_geometry.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\n_geometry.setAttribute( 'uv', new Float32BufferAttribute( [ 0, 2, 0, 0, 2, 0 ], 2 ) );\n\nclass FullScreenQuad {\n\n\tconstructor( material ) {\n\n\t\tthis._mesh = new Mesh( _geometry, material );\n\n\t}\n\n\tdispose() {\n\n\t\tthis._mesh.geometry.dispose();\n\n\t}\n\n\trender( renderer ) {\n\n\t\trenderer.render( this._mesh, _camera );\n\n\t}\n\n\tget material() {\n\n\t\treturn this._mesh.material;\n\n\t}\n\n\tset material( value ) {\n\n\t\tthis._mesh.material = value;\n\n\t}\n\n}\n\nexport { EffectComposer, Pass, FullScreenQuad };\n","/**\n * RGB Shift Shader\n * Shifts red and blue channels from center in opposite directions\n * Ported from http://kriss.cx/tom/2009/05/rgb-shift/\n * by Tom Butterworth / http://kriss.cx/tom/\n *\n * amount: shift distance (1 is width of input)\n * angle: shift angle in radians\n */\n\nconst DigitalGlitch = {\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null }, //diffuse texture\n\t\t'tDisp': { value: null }, //displacement texture for digital glitch squares\n\t\t'byp': { value: 0 }, //apply the glitch ?\n\t\t'amount': { value: 0.08 },\n\t\t'angle': { value: 0.02 },\n\t\t'seed': { value: 0.02 },\n\t\t'seed_x': { value: 0.02 }, //-1,1\n\t\t'seed_y': { value: 0.02 }, //-1,1\n\t\t'distortion_x': { value: 0.5 },\n\t\t'distortion_y': { value: 0.6 },\n\t\t'col_s': { value: 0.05 }\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\t\tvoid main() {\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform int byp; //should we apply the glitch ?\n\n\t\tuniform sampler2D tDiffuse;\n\t\tuniform sampler2D tDisp;\n\n\t\tuniform float amount;\n\t\tuniform float angle;\n\t\tuniform float seed;\n\t\tuniform float seed_x;\n\t\tuniform float seed_y;\n\t\tuniform float distortion_x;\n\t\tuniform float distortion_y;\n\t\tuniform float col_s;\n\n\t\tvarying vec2 vUv;\n\n\n\t\tfloat rand(vec2 co){\n\t\t\treturn fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n\t\t}\n\n\t\tvoid main() {\n\t\t\tif(byp<1) {\n\t\t\t\tvec2 p = vUv;\n\t\t\t\tfloat xs = floor(gl_FragCoord.x / 0.5);\n\t\t\t\tfloat ys = floor(gl_FragCoord.y / 0.5);\n\t\t\t\t//based on staffantans glitch shader for unity https://github.com/staffantan/unityglitch\n\t\t\t\tvec4 normal = texture2D (tDisp, p*seed*seed);\n\t\t\t\tif(p.y<distortion_x+col_s && p.y>distortion_x-col_s*seed) {\n\t\t\t\t\tif(seed_x>0.){\n\t\t\t\t\t\tp.y = 1. - (p.y + distortion_y);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tp.y = distortion_y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(p.x<distortion_y+col_s && p.x>distortion_y-col_s*seed) {\n\t\t\t\t\tif(seed_y>0.){\n\t\t\t\t\t\tp.x=distortion_x;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tp.x = 1. - (p.x + distortion_x);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tp.x+=normal.x*seed_x*(seed/5.);\n\t\t\t\tp.y+=normal.y*seed_y*(seed/5.);\n\t\t\t\t//base from RGB shift shader\n\t\t\t\tvec2 offset = amount * vec2( cos(angle), sin(angle));\n\t\t\t\tvec4 cr = texture2D(tDiffuse, p + offset);\n\t\t\t\tvec4 cga = texture2D(tDiffuse, p);\n\t\t\t\tvec4 cb = texture2D(tDiffuse, p - offset);\n\t\t\t\tgl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\n\t\t\t\t//add noise\n\t\t\t\tvec4 snow = 200.*amount*vec4(rand(vec2(xs * seed,ys * seed*50.))*0.2);\n\t\t\t\tgl_FragColor = gl_FragColor+ snow;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tgl_FragColor=texture2D (tDiffuse, vUv);\n\t\t\t}\n\t\t}`\n\n};\n\nexport { DigitalGlitch };\n","import {\n\tDataTexture,\n\tFloatType,\n\tMathUtils,\n\tRGBFormat,\n\tShaderMaterial,\n\tUniformsUtils\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { DigitalGlitch } from '../shaders/DigitalGlitch.js';\n\nclass GlitchPass extends Pass {\n\n\tconstructor( dt_size = 64 ) {\n\n\t\tsuper();\n\n\t\tif ( DigitalGlitch === undefined ) console.error( 'THREE.GlitchPass relies on DigitalGlitch' );\n\n\t\tconst shader = DigitalGlitch;\n\n\t\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\tthis.uniforms[ 'tDisp' ].value = this.generateHeightmap( dt_size );\n\n\t\tthis.material = new ShaderMaterial( {\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader\n\t\t} );\n\n\t\tthis.fsQuad = new FullScreenQuad( this.material );\n\n\t\tthis.goWild = false;\n\t\tthis.curF = 0;\n\t\tthis.generateTrigger();\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tthis.uniforms[ 'tDiffuse' ].value = readBuffer.texture;\n\t\tthis.uniforms[ 'seed' ].value = Math.random();//default seeding\n\t\tthis.uniforms[ 'byp' ].value = 0;\n\n\t\tif ( this.curF % this.randX == 0 || this.goWild == true ) {\n\n\t\t\tthis.uniforms[ 'amount' ].value = Math.random() / 30;\n\t\t\tthis.uniforms[ 'angle' ].value = MathUtils.randFloat( - Math.PI, Math.PI );\n\t\t\tthis.uniforms[ 'seed_x' ].value = MathUtils.randFloat( - 1, 1 );\n\t\t\tthis.uniforms[ 'seed_y' ].value = MathUtils.randFloat( - 1, 1 );\n\t\t\tthis.uniforms[ 'distortion_x' ].value = MathUtils.randFloat( 0, 1 );\n\t\t\tthis.uniforms[ 'distortion_y' ].value = MathUtils.randFloat( 0, 1 );\n\t\t\tthis.curF = 0;\n\t\t\tthis.generateTrigger();\n\n\t\t} else if ( this.curF % this.randX < this.randX / 5 ) {\n\n\t\t\tthis.uniforms[ 'amount' ].value = Math.random() / 90;\n\t\t\tthis.uniforms[ 'angle' ].value = MathUtils.randFloat( - Math.PI, Math.PI );\n\t\t\tthis.uniforms[ 'distortion_x' ].value = MathUtils.randFloat( 0, 1 );\n\t\t\tthis.uniforms[ 'distortion_y' ].value = MathUtils.randFloat( 0, 1 );\n\t\t\tthis.uniforms[ 'seed_x' ].value = MathUtils.randFloat( - 0.3, 0.3 );\n\t\t\tthis.uniforms[ 'seed_y' ].value = MathUtils.randFloat( - 0.3, 0.3 );\n\n\t\t} else if ( this.goWild == false ) {\n\n\t\t\tthis.uniforms[ 'byp' ].value = 1;\n\n\t\t}\n\n\t\tthis.curF ++;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\tif ( this.clear ) renderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n\tgenerateTrigger() {\n\n\t\tthis.randX = MathUtils.randInt( 120, 240 );\n\n\t}\n\n\tgenerateHeightmap( dt_size ) {\n\n\t\tconst data_arr = new Float32Array( dt_size * dt_size * 3 );\n\t\tconst length = dt_size * dt_size;\n\n\t\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\t\tconst val = MathUtils.randFloat( 0, 1 );\n\t\t\tdata_arr[ i * 3 + 0 ] = val;\n\t\t\tdata_arr[ i * 3 + 1 ] = val;\n\t\t\tdata_arr[ i * 3 + 2 ] = val;\n\n\t\t}\n\n\t\tconst texture = new DataTexture( data_arr, dt_size, dt_size, RGBFormat, FloatType );\n\t\ttexture.needsUpdate = true;\n\t\treturn texture;\n\n\t}\n\n}\n\nexport { GlitchPass };\n","import {\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tOrthographicCamera,\n\tMesh\n} from 'three';\n\nclass Pass {\n\n\tconstructor() {\n\n\t\t// if set to true, the pass is processed by the composer\n\t\tthis.enabled = true;\n\n\t\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\t\tthis.needsSwap = true;\n\n\t\t// if set to true, the pass clears its buffer before rendering\n\t\tthis.clear = false;\n\n\t\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\t\tthis.renderToScreen = false;\n\n\t}\n\n\tsetSize( /* width, height */ ) {}\n\n\trender( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nconst _geometry = new BufferGeometry();\n_geometry.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\n_geometry.setAttribute( 'uv', new Float32BufferAttribute( [ 0, 2, 0, 0, 2, 0 ], 2 ) );\n\nclass FullScreenQuad {\n\n\tconstructor( material ) {\n\n\t\tthis._mesh = new Mesh( _geometry, material );\n\n\t}\n\n\tdispose() {\n\n\t\tthis._mesh.geometry.dispose();\n\n\t}\n\n\trender( renderer ) {\n\n\t\trenderer.render( this._mesh, _camera );\n\n\t}\n\n\tget material() {\n\n\t\treturn this._mesh.material;\n\n\t}\n\n\tset material( value ) {\n\n\t\tthis._mesh.material = value;\n\n\t}\n\n}\n\nexport { Pass, FullScreenQuad };\n","import {\n\tColor\n} from 'three';\nimport { Pass } from './Pass.js';\n\nclass RenderPass extends Pass {\n\n\tconstructor( scene, camera, overrideMaterial, clearColor, clearAlpha ) {\n\n\t\tsuper();\n\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tthis.overrideMaterial = overrideMaterial;\n\n\t\tthis.clearColor = clearColor;\n\t\tthis.clearAlpha = ( clearAlpha !== undefined ) ? clearAlpha : 0;\n\n\t\tthis.clear = true;\n\t\tthis.clearDepth = false;\n\t\tthis.needsSwap = false;\n\t\tthis._oldClearColor = new Color();\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tconst oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\tlet oldClearAlpha, oldOverrideMaterial;\n\n\t\tif ( this.overrideMaterial !== undefined ) {\n\n\t\t\toldOverrideMaterial = this.scene.overrideMaterial;\n\n\t\t\tthis.scene.overrideMaterial = this.overrideMaterial;\n\n\t\t}\n\n\t\tif ( this.clearColor ) {\n\n\t\t\trenderer.getClearColor( this._oldClearColor );\n\t\t\toldClearAlpha = renderer.getClearAlpha();\n\n\t\t\trenderer.setClearColor( this.clearColor, this.clearAlpha );\n\n\t\t}\n\n\t\tif ( this.clearDepth ) {\n\n\t\t\trenderer.clearDepth();\n\n\t\t}\n\n\t\trenderer.setRenderTarget( this.renderToScreen ? null : readBuffer );\n\n\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\trenderer.render( this.scene, this.camera );\n\n\t\tif ( this.clearColor ) {\n\n\t\t\trenderer.setClearColor( this._oldClearColor, oldClearAlpha );\n\n\t\t}\n\n\t\tif ( this.overrideMaterial !== undefined ) {\n\n\t\t\tthis.scene.overrideMaterial = oldOverrideMaterial;\n\n\t\t}\n\n\t\trenderer.autoClear = oldAutoClear;\n\n\t}\n\n}\n\nexport { RenderPass };\n","import {\n\tShaderMaterial,\n\tUniformsUtils\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\n\nclass ShaderPass extends Pass {\n\n\tconstructor( shader, textureID ) {\n\n\t\tsuper();\n\n\t\tthis.textureID = ( textureID !== undefined ) ? textureID : 'tDiffuse';\n\n\t\tif ( shader instanceof ShaderMaterial ) {\n\n\t\t\tthis.uniforms = shader.uniforms;\n\n\t\t\tthis.material = shader;\n\n\t\t} else if ( shader ) {\n\n\t\t\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\t\tthis.material = new ShaderMaterial( {\n\n\t\t\t\tdefines: Object.assign( {}, shader.defines ),\n\t\t\t\tuniforms: this.uniforms,\n\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t\t} );\n\n\t\t}\n\n\t\tthis.fsQuad = new FullScreenQuad( this.material );\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tif ( this.uniforms[ this.textureID ] ) {\n\n\t\t\tthis.uniforms[ this.textureID ].value = readBuffer.texture;\n\n\t\t}\n\n\t\tthis.fsQuad.material = this.material;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n}\n\nexport { ShaderPass };\n","/**\n * RGB Shift Shader\n * Shifts red and blue channels from center in opposite directions\n * Ported from http://kriss.cx/tom/2009/05/rgb-shift/\n * by Tom Butterworth / http://kriss.cx/tom/\n *\n * amount: shift distance (1 is width of input)\n * angle: shift angle in radians\n */\n\nconst RGBShiftShader = {\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'amount': { value: 0.005 },\n\t\t'angle': { value: 0.0 }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform sampler2D tDiffuse;\n\t\tuniform float amount;\n\t\tuniform float angle;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec2 offset = amount * vec2( cos(angle), sin(angle));\n\t\t\tvec4 cr = texture2D(tDiffuse, vUv + offset);\n\t\t\tvec4 cga = texture2D(tDiffuse, vUv);\n\t\t\tvec4 cb = texture2D(tDiffuse, vUv - offset);\n\t\t\tgl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\n\n\t\t}`\n\n};\n\nexport { RGBShiftShader };\n"],"names":["DotScreenShader","uniforms","value","vertexShader","fragmentShader","DotScreenPass","Pass","constructor","center","angle","scale","super","undefined","console","error","shader","this","copy","material","fsQuad","render","renderer","writeBuffer","readBuffer","texture","set","width","height","renderToScreen","setRenderTarget","clear","CopyShader","MaskPass","scene","camera","needsSwap","inverse","context","getContext","state","writeValue","clearValue","buffers","color","setMask","depth","setLocked","stencil","setTest","setOp","REPLACE","setFunc","ALWAYS","setClear","EQUAL","KEEP","ClearMaskPass","EffectComposer","renderTarget","parameters","minFilter","magFilter","format","size","getSize","_pixelRatio","getPixelRatio","_width","_height","name","renderTarget1","renderTarget2","clone","passes","ShaderPass","copyPass","clock","swapBuffers","tmp","addPass","pass","push","setSize","insertPass","index","splice","removePass","indexOf","isLastEnabledPass","passIndex","i","length","enabled","deltaTime","getDelta","currentRenderTarget","getRenderTarget","maskActive","il","NOTEQUAL","reset","dispose","effectiveWidth","effectiveHeight","setPixelRatio","pixelRatio","_geometry","setAttribute","DigitalGlitch","GlitchPass","dt_size","generateHeightmap","goWild","curF","generateTrigger","Math","random","randX","PI","data_arr","Float32Array","val","needsUpdate","_camera","FullScreenQuad","_mesh","geometry","RenderPass","overrideMaterial","clearColor","clearAlpha","clearDepth","_oldClearColor","oldAutoClear","autoClear","oldClearAlpha","oldOverrideMaterial","getClearColor","getClearAlpha","setClearColor","autoClearColor","autoClearDepth","autoClearStencil","textureID","defines","Object","assign","RGBShiftShader"],"sourceRoot":""}