{"version":3,"file":"8.min_9fed355fba.js","mappings":"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","sources":["webpack://tp_threejs/./src/ThreeJs/BaseApplication.ts","webpack://tp_threejs/./src/ThreeJs/Demo/BaseDemo.ts","webpack://tp_threejs/./src/ThreeJs/Demo/Demo05.ts"],"sourcesContent":["import { Camera, PerspectiveCamera, Scene, Vector3, WebGLRenderer } from 'three';\nimport { STAGE } from './../Config';\n\n/**\n * 应用基类\n */\nexport class BaseApplication {\n\tpublic appId: string = '00';\n\tpublic appName: string = 'BASE';\n\tprotected width: number = STAGE.width;\n\tprotected height: number = STAGE.height;\n\tprotected canvas: HTMLCanvasElement = null;\n\n\tprotected scene: Scene;\n\tprotected camera: Camera;\n\tprotected renderer: WebGLRenderer;\n\tprotected viewCenter: Vector3 = new Vector3(0, 0, 0);\n\n\tpublic constructor(canvas: HTMLCanvasElement) {\n\t\tthis.canvas = canvas;\n\t}\n\n\t/**\n\t * @override 子类覆写\n\t */\n\tprotected initRender(): void {\n\t\tconst renderer = new WebGLRenderer({\n\t\t\tantialias: true, // 抗锯齿开启\n\t\t\tcanvas: this.canvas,\n\t\t});\n\t\trenderer.setSize(this.width, this.height); // 设置渲染器的宽度和高度\n\t\trenderer.setClearColor('#000000', 1.0); // 设置背景颜色\n\t\trenderer.setPixelRatio(window.devicePixelRatio); // 设置设备像素比\n\n\t\tthis.renderer = renderer;\n\t}\n\n\t/**\n\t * @override 子类覆写\n\t */\n\tprotected initScene(): void {\n\t\tconst scene = new Scene();\n\t\tthis.scene = scene;\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprotected initCamera(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t */\n\tprotected initLight(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t */\n\tprotected initModel(): void {}\n\n\t/**\n\t * @override 子类复写\n\t */\n\tprotected onCreating(): void {}\n\n\t/**\n\t * @override 子类复写\n\t */\n\tprotected onCreated(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t * 开始渲染\n\t */\n\tprotected onRender(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t * 开始销毁\n\t */\n\tprotected onDestroy(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t * 开始 resize\n\t */\n\tprotected onResize(): void {}\n\n\t/**\n\t * 创建后的调用\n\t */\n\tprivate create(): void {\n\t\tthis.onCreating();\n\t\tthis.initRender();\n\t\tthis.initScene();\n\t\tthis.initCamera();\n\t\tthis.initLight();\n\t\tthis.initModel();\n\t\tthis.onCreated();\n\t}\n\n\t/**\n\t * 渲染\n\t */\n\tprivate render(): void {\n\t\tthis.renderer?.clear();\n\t\tthis.onRender();\n\t\tthis.handle = requestAnimationFrame(this.render.bind(this));\n\t}\n\n\t/**\n\t * 开始执行\n\t */\n\tprivate handle: number = -1;\n\tpublic run(): void {\n\t\tthis.create();\n\t\tthis.render();\n\t}\n\n\t/**\n\t * 视口变化\n\t */\n\tpublic resize(): void {\n\t\t// update size\n\t\tthis.width = window.innerWidth;\n\t\tthis.height = window.innerHeight;\n\n\t\t// update camera\n\t\tif (this.camera && this.camera instanceof PerspectiveCamera) {\n\t\t\tthis.camera.aspect = this.width / this.height;\n\t\t\tthis.camera.updateProjectionMatrix();\n\t\t}\n\n\t\t// update renderer\n\t\tthis.renderer?.setSize(this.width, this.height);\n\t\tthis.renderer?.setPixelRatio(Math.min(2, window.devicePixelRatio));\n\n\t\tthis.onResize();\n\t}\n\n\t/**\n\t * @override 子类覆写\n\t * 销毁清理\n\t */\n\tpublic destroy(): void {\n\t\tthis.onDestroy();\n\n\t\tthis.scene.clear();\n\t\tthis.renderer.clear();\n\t\tcancelAnimationFrame(this.handle);\n\t\tconsole.log(`销毁应用【${this.appId} ${this.appName}】`);\n\t}\n}\n","import { BaseApplication } from '../BaseApplication';\n\nexport class BaseDemo extends BaseApplication {}\n","import {\n    AmbientLight,\n    ArrowHelper,\n    AxesHelper,\n    BoxGeometry,\n    BufferGeometry,\n    CircleGeometry,\n    CylinderGeometry,\n    DoubleSide,\n    IcosahedronGeometry,\n    LatheGeometry,\n    Mesh,\n    MeshLambertMaterial,\n    Object3D,\n    OctahedronGeometry,\n    PerspectiveCamera,\n    PlaneGeometry,\n    PointLight,\n    RepeatWrapping,\n    RingGeometry,\n    SphereGeometry,\n    TetrahedronGeometry,\n    TextureLoader,\n    TorusGeometry,\n    TorusKnotGeometry,\n    Vector2,\n    Vector3\n} from 'three';\nimport { BaseDemo } from './BaseDemo';\n\n\n/**\n * 05\n * 内置几何\n */\nexport class Demo05 extends BaseDemo {\n\t/**\n\t * @override\n\t */\n\tprotected initCamera(): void {\n\t\tconst camera = new PerspectiveCamera(45, this.width / this.height, 1, 2000);\n\t\tcamera.position.y = 400; // 设置相机位置\n\t\tcamera.lookAt(this.scene.position);\n\t\tthis.camera = camera;\n\t\tthis.scene.add(camera);\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprotected initLight(): void {\n\t\t// 环境光\n\t\tconst ambientLight = new AmbientLight(0xcccccc, 0.4);\n\t\tthis.scene.add(ambientLight);\n\t\t// 点光源\n\t\tconst pointLight = new PointLight(0xffffff, 0.8);\n\t\tthis.scene.add(pointLight);\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprotected initModel(): void {\n\t\t// 加载图片，生成纹理\n\t\tconst map = new TextureLoader().load('./resource/textures/UV_Grid_Sm.jpg');\n\t\t// 定义纹理在水平和垂直方向简单的重复无穷大\n\t\tmap.wrapS = map.wrapT = RepeatWrapping;\n\t\t// 定义纹理的各向异性\n\t\tmap.anisotropy = 16;\n\n\t\tconst material = new MeshLambertMaterial({ map: map, side: DoubleSide });\n\n\t\tlet object: Object3D,\n\t\t\tgeometry: BufferGeometry,\n\t\t\tscene = this.scene;\n\t\t// 球形网络\n\t\tgeometry = new SphereGeometry(75, 20, 10);\n\t\tobject = new Mesh(geometry, material);\n\t\tobject.position.set(-300, 0, 200);\n\t\tscene.add(object);\n\n\t\t// 二十面体\n\t\tgeometry = new IcosahedronGeometry(75, 1);\n\t\tobject = new Mesh(geometry, material);\n\t\tobject.position.set(-100, 0, 200);\n\t\tscene.add(object);\n\n\t\t// 八面体\n\t\tgeometry = new OctahedronGeometry(75, 2);\n\t\tobject = new Mesh(geometry, material);\n\t\tobject.position.set(100, 0, 200);\n\t\tscene.add(object);\n\n\t\t// 四面体\n\t\tgeometry = new TetrahedronGeometry(75, 0);\n\t\tobject = new Mesh(geometry, material);\n\t\tobject.position.set(300, 0, 200);\n\t\tscene.add(object);\n\n\t\t// 长方体平面\n\t\tgeometry = new PlaneGeometry(100, 100, 4, 4);\n\t\tobject = new Mesh(geometry, material);\n\t\tobject.position.set(-300, 0, 0);\n\t\tscene.add(object);\n\n\t\t// 立方体\n\t\tgeometry = new BoxGeometry(100, 100, 100, 4, 4, 4);\n\t\tobject = new Mesh(geometry, material);\n\t\tobject.position.set(-100, 0, 0);\n\t\tscene.add(object);\n\n\t\t// 圆形平面\n\t\tgeometry = new CircleGeometry(50, 20, 0, Math.PI * 2);\n\t\tobject = new Mesh(geometry, material);\n\t\tobject.position.set(100, 0, 0);\n\t\tscene.add(object);\n\n\t\t// 空心圆平面\n\t\tgeometry = new RingGeometry(10, 50, 20, 5, 0, Math.PI * 2);\n\t\tobject = new Mesh(geometry, material);\n\t\tobject.position.set(300, 0, 0);\n\t\tscene.add(object);\n\n\t\t// 圆柱体\n\t\tgeometry = new CylinderGeometry(25, 75, 100, 40, 5);\n\t\tobject = new Mesh(geometry, material);\n\t\tobject.position.set(-300, 0, -200);\n\t\tscene.add(object);\n\n\t\t// 车床模型\n\t\tconst points = [];\n\t\tfor (let i = 0; i < 50; i++) {\n\t\t\tpoints.push(new Vector2(Math.sin(i * 0.2) * Math.sin(i * 0.1) * 15 + 50, (i - 5) * 2));\n\t\t}\n\t\tgeometry = new LatheGeometry(points, 20);\n\t\tobject = new Mesh(geometry, material);\n\t\tobject.position.set(-100, 0, -200);\n\t\tscene.add(object);\n\n\t\t// 救生圈\n\t\tgeometry = new TorusGeometry(50, 20, 20, 20);\n\t\tobject = new Mesh(geometry, material);\n\t\tobject.position.set(100, 0, -200);\n\t\tscene.add(object);\n\n\t\t// 环形结构\n\t\tgeometry = new TorusKnotGeometry(50, 10, 50, 20);\n\t\tobject = new Mesh(geometry, material);\n\t\tobject.position.set(300, 0, -200);\n\t\tscene.add(object);\n\n\t\t// 轴辅助\n\t\tobject = new AxesHelper(50);\n\t\tobject.position.set(450, 0, 200);\n\t\tscene.add(object);\n\n\t\t// 箭头辅助\n\t\tobject = new ArrowHelper(new Vector3(0, 1, 0), new Vector3(0, 0, 0), 50, 0x00ffff);\n\t\tobject.position.set(450, 0, -200);\n\t\tscene.add(object);\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic onRender(): void {\n\t\tconst timer = Date.now() * 0.0001;\n\n\t\tthis.camera.position.x = Math.cos(timer) * 800;\n\t\tthis.camera.position.z = Math.sin(timer) * 800;\n\n\t\tthis.camera.lookAt(this.scene.position);\n\n\t\tthis.scene.traverse(function (object) {\n\t\t\tif (object.isObject3D === true) {\n\t\t\t\t// object.rotation.x = timer * 5;\n\t\t\t\t// object.rotation.y = timer * 0.001 * 2.5;\n\t\t\t\tobject.rotation.x += 0.001;\n\t\t\t\tobject.rotation.y += 0.001;\n\t\t\t}\n\t\t});\n\n\t\tthis.renderer.render(this.scene, this.camera);\n\t}\n}\n"],"names":["BaseApplication","canvas","appId","appName","width","height","viewCenter","handle","this","initRender","renderer","antialias","setSize","setClearColor","setPixelRatio","window","devicePixelRatio","initScene","scene","initCamera","initLight","initModel","onCreating","onCreated","onRender","onDestroy","onResize","create","render","clear","requestAnimationFrame","bind","run","resize","innerWidth","innerHeight","camera","aspect","updateProjectionMatrix","Math","min","destroy","cancelAnimationFrame","console","log","BaseDemo","Demo05","position","y","lookAt","add","ambientLight","pointLight","map","load","wrapS","wrapT","anisotropy","material","side","object","geometry","set","PI","points","i","push","sin","timer","Date","now","x","cos","z","traverse","isObject3D","rotation"],"sourceRoot":""}