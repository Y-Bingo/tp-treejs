{"version":3,"file":"25.min_8a97acf178.js","mappings":"iJAMO,MAAMA,EAYZ,YAAmBC,GAXZ,KAAAC,MAAgB,KAChB,KAAAC,QAAkB,OACf,KAAAC,MAAgB,UAChB,KAAAC,OAAiB,WACjB,KAAAJ,OAA4B,KAK5B,KAAAK,WAAsB,IAAI,KAAQ,EAAG,EAAG,GAiG1C,KAAAC,QAAkB,EA9FzBC,KAAKP,OAASA,EAMLQ,aACT,MAAMC,EAAW,IAAI,KAAc,CAClCC,WAAW,EACXV,OAAQO,KAAKP,SAEdS,EAASE,QAAQJ,KAAKJ,MAAOI,KAAKH,QAClCK,EAASG,cAAc,UAAW,GAClCH,EAASI,cAAcC,OAAOC,kBAE9BR,KAAKE,SAAWA,EAMPO,YACT,MAAMC,EAAQ,IAAI,KAClBV,KAAKU,MAAQA,EAMJC,cAKAC,aAKAC,aAKAC,cAKAC,aAMAC,YAMAC,aAMAC,YAKFC,SACPnB,KAAKc,aACLd,KAAKC,aACLD,KAAKS,YACLT,KAAKW,aACLX,KAAKY,YACLZ,KAAKa,YACLb,KAAKe,YAMEK,S,MACM,QAAb,EAAApB,KAAKE,gBAAQ,SAAEmB,QACfrB,KAAKgB,WACLhB,KAAKD,OAASuB,sBAAsBtB,KAAKoB,OAAOG,KAAKvB,OAO/CwB,MACNxB,KAAKmB,SACLnB,KAAKoB,SAMCK,S,QAENzB,KAAKJ,MAAQW,OAAOmB,WACpB1B,KAAKH,OAASU,OAAOoB,YAGjB3B,KAAK4B,QAAU5B,KAAK4B,kBAAkB,OACzC5B,KAAK4B,OAAOC,OAAS7B,KAAKJ,MAAQI,KAAKH,OACvCG,KAAK4B,OAAOE,0BAIA,QAAb,EAAA9B,KAAKE,gBAAQ,SAAEE,QAAQJ,KAAKJ,MAAOI,KAAKH,QAC3B,QAAb,EAAAG,KAAKE,gBAAQ,SAAEI,cAAcyB,KAAKC,IAAI,EAAGzB,OAAOC,mBAEhDR,KAAKkB,WAOCe,UACNjC,KAAKiB,YAELjB,KAAKU,MAAMW,QACXrB,KAAKE,SAASmB,QACda,qBAAqBlC,KAAKD,QAC1BoC,QAAQC,IAAI,QAAQpC,KAAKN,SAASM,KAAKL,e,8DCpJlC,MAAM0C,UAAoB,O,2KCe1B,MAAMC,UAAkB,EAAAD,YAA/B,c,oBAgOS,KAAAE,cAAwB,EAvNtBzB,aAETd,KAAKwC,OAAS,CACbC,gBAAiB,GAIlBzC,KAAK0C,MAAQ,IAAI,IAGjB1C,KAAK2C,IAAM,IAAI,IAON5B,YAETf,KAAK4C,SAAW,IAAI,IAAc5C,KAAK4B,OAAQ5B,KAAKP,QACpDO,KAAK4C,SAASC,eAAgB,EAE9B7C,KAAKE,SAAS4C,UAAUC,SAAU,EAClC/C,KAAKE,SAAS4C,UAAUE,KAAO,KAC/BhD,KAAKE,SAAS+C,yBAA0B,EACxCjD,KAAKE,SAASgD,eAAiB,KAC/BlD,KAAKE,SAASiD,YAAc,KAC5BnD,KAAKE,SAASkD,oBAAsB,IAEpC,MAAMC,EAAe,IAAI,KAAwBrD,KAAKJ,MAAOI,KAAKH,OAAQ,CACzEyD,UAAW,IACXC,UAAW,IACXC,OAAQ,KACRC,SAAU,OAILC,EAAiB,IAAI,IAAe1D,KAAKE,SAAUmD,GAEzDK,EAAepD,cAAcyB,KAAKC,IAAI,EAAGzB,OAAOC,mBAChDkD,EAAetD,QAAQJ,KAAKJ,MAAOI,KAAKH,QACxCG,KAAK0D,eAAiBA,EAEtB,MAAMC,EAAa,IAAI,IAAW3D,KAAKU,MAAOV,KAAK4B,QACnD8B,EAAeE,QAAQD,GAEvB,MAAME,EAAgB,IAAI,IAC1BA,EAAcd,SAAU,EACxBW,EAAeE,QAAQC,GAEvB,MAAMC,EAAa,IAAI,IAEvBA,EAAWf,SAAU,EACrBW,EAAeE,QAAQE,GAEvB,MAAMC,EAAa,IAAI,IAAW,KAClCA,EAAWhB,SAAU,EACrBW,EAAeE,QAAQG,GAiCvB,MAAMC,EAAgB,IAAI,KACpBC,EAAqB,CAC1BC,SAAU,CACTC,SAAU,CAAEC,MAAO,MACnBC,WAAY,CAAED,MAAO,OAEtBE,aAAc,0PASdC,eAAgB,stBAqBXC,EAAmB,IAAI,IAAWP,GACxCO,EAAiBN,SAASG,WAAWD,MAAQJ,EAAcS,KAAK,6CAChEzE,KAAK0D,eAAeE,QAAQY,GAGnBtD,WACTlB,KAAK0D,eAAetD,QAAQJ,KAAKJ,MAAOI,KAAKH,QAMpCe,YACT,MAAM8D,EAAmB,IAAI,IAAuB,SAAU,GAC9DA,EAAiBC,SAASC,IAAI,IAAM,GAAI,MACxCF,EAAiBG,OAAOC,QAAQF,IAAI,KAAM,MAC1CF,EAAiBK,YAAa,EAC9BL,EAAiBG,OAAOjD,OAAOoD,IAAM,GACrCN,EAAiBG,OAAOI,WAAa,IACrCjF,KAAKU,MAAMwE,IAAIR,GAMN/D,aACT,MAAMiB,EAAS,IAAI,KAAwB,GAAI5B,KAAKJ,MAAQI,KAAKH,OAAQ,GAAK,KAC9E+B,EAAO+C,SAASC,IAAI,EAAG,GAAI,GAC3B5E,KAAK4B,OAASA,EACd5B,KAAKU,MAAMwE,IAAItD,GAMNf,YACT,MAAMH,EAAQV,KAAKU,MAGbyE,GAFgB,IAAI,MACA,IAAI,KACWV,KAAK,CAC7C,4CACA,4CACA,4CACA,4CACA,4CACA,+CAEDU,EAAe1B,SAAW,KAC1B/C,EAAM0E,WAAaD,EACnBzE,EAAM2E,YAAcF,EAEpB,MAAMG,EAAc,IAAI,IACxBA,EAAYC,eAAe,mBAE3B,MAAMC,EAAa,IAAI,IACvBA,EAAWC,eAAeH,GAE1BE,EAAWf,KACV,mEACAiB,IACCA,EAAKhF,MAAMiF,MAAMf,IAAI,EAAG,EAAG,GAC3Bc,EAAKhF,MAAMkF,SAASC,EAAc,GAAV9D,KAAK+D,GAC7BpF,EAAMwE,IAAIQ,EAAKhF,OAEfV,KAAK+F,uBAEN,KACC5D,QAAQC,IAAI,eAEb4D,IACC7D,QAAQC,IAAI,QAAS4D,MAKhBD,oBACP/F,KAAKU,MAAMuF,UAASC,IACfA,aAAiB,MAAcA,EAAMC,oBAAoB,OAC5DD,EAAMC,SAAS1D,gBAAkBzC,KAAKwC,OAAOC,gBAC7CyD,EAAMC,SAASC,aAAc,EAC7BF,EAAMG,eAAgB,EACtBH,EAAMnB,YAAa,MASZ/D,WACThB,KAAK4C,SAAS0D,SAEdtG,KAAK0D,eAAetC,SAEpB,MAAMmF,EAAcvG,KAAK0C,MAAM8D,iBACCxG,KAAKuC,cACrCvC,KAAKuC,cAAgBgE,EAMZtF,Y,MACD,QAAR,EAAAjB,KAAK2C,WAAG,SAAEV","sources":["webpack://tp_threejs/./src/ThreeJs/BaseApplication.ts","webpack://tp_threejs/./src/ThreeJs/Journey/BaseJourney.ts","webpack://tp_threejs/./src/ThreeJs/Journey/Journey32.ts"],"sourcesContent":["import { Camera, PerspectiveCamera, Scene, Vector3, WebGLRenderer } from 'three';\nimport { STAGE } from './../Config';\n\n/**\n * 应用基类\n */\nexport class BaseApplication {\n\tpublic appId: string = '00';\n\tpublic appName: string = 'BASE';\n\tprotected width: number = STAGE.width;\n\tprotected height: number = STAGE.height;\n\tprotected canvas: HTMLCanvasElement = null;\n\n\tprotected scene: Scene;\n\tprotected camera: Camera;\n\tprotected renderer: WebGLRenderer;\n\tprotected viewCenter: Vector3 = new Vector3(0, 0, 0);\n\n\tpublic constructor(canvas: HTMLCanvasElement) {\n\t\tthis.canvas = canvas;\n\t}\n\n\t/**\n\t * @override 子类覆写\n\t */\n\tprotected initRender(): void {\n\t\tconst renderer = new WebGLRenderer({\n\t\t\tantialias: true, // 抗锯齿开启\n\t\t\tcanvas: this.canvas,\n\t\t});\n\t\trenderer.setSize(this.width, this.height); // 设置渲染器的宽度和高度\n\t\trenderer.setClearColor('#000000', 1.0); // 设置背景颜色\n\t\trenderer.setPixelRatio(window.devicePixelRatio); // 设置设备像素比\n\n\t\tthis.renderer = renderer;\n\t}\n\n\t/**\n\t * @override 子类覆写\n\t */\n\tprotected initScene(): void {\n\t\tconst scene = new Scene();\n\t\tthis.scene = scene;\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprotected initCamera(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t */\n\tprotected initLight(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t */\n\tprotected initModel(): void {}\n\n\t/**\n\t * @override 子类复写\n\t */\n\tprotected onCreating(): void {}\n\n\t/**\n\t * @override 子类复写\n\t */\n\tprotected onCreated(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t * 开始渲染\n\t */\n\tprotected onRender(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t * 开始销毁\n\t */\n\tprotected onDestroy(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t * 开始 resize\n\t */\n\tprotected onResize(): void {}\n\n\t/**\n\t * 创建后的调用\n\t */\n\tprivate create(): void {\n\t\tthis.onCreating();\n\t\tthis.initRender();\n\t\tthis.initScene();\n\t\tthis.initCamera();\n\t\tthis.initLight();\n\t\tthis.initModel();\n\t\tthis.onCreated();\n\t}\n\n\t/**\n\t * 渲染\n\t */\n\tprivate render(): void {\n\t\tthis.renderer?.clear();\n\t\tthis.onRender();\n\t\tthis.handle = requestAnimationFrame(this.render.bind(this));\n\t}\n\n\t/**\n\t * 开始执行\n\t */\n\tprivate handle: number = -1;\n\tpublic run(): void {\n\t\tthis.create();\n\t\tthis.render();\n\t}\n\n\t/**\n\t * 视口变化\n\t */\n\tpublic resize(): void {\n\t\t// update size\n\t\tthis.width = window.innerWidth;\n\t\tthis.height = window.innerHeight;\n\n\t\t// update camera\n\t\tif (this.camera && this.camera instanceof PerspectiveCamera) {\n\t\t\tthis.camera.aspect = this.width / this.height;\n\t\t\tthis.camera.updateProjectionMatrix();\n\t\t}\n\n\t\t// update renderer\n\t\tthis.renderer?.setSize(this.width, this.height);\n\t\tthis.renderer?.setPixelRatio(Math.min(2, window.devicePixelRatio));\n\n\t\tthis.onResize();\n\t}\n\n\t/**\n\t * @override 子类覆写\n\t * 销毁清理\n\t */\n\tpublic destroy(): void {\n\t\tthis.onDestroy();\n\n\t\tthis.scene.clear();\n\t\tthis.renderer.clear();\n\t\tcancelAnimationFrame(this.handle);\n\t\tconsole.log(`销毁应用【${this.appId} ${this.appName}】`);\n\t}\n}\n","import { BaseApplication } from '../BaseApplication';\n\nexport class BaseJourney extends BaseApplication {}\n","import * as dat from 'dat.gui';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { DotScreenPass } from 'three/examples/jsm/postprocessing/DotScreenPass';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { GlitchPass } from 'three/examples/jsm/postprocessing/GlitchPass';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass';\nimport { RGBShiftShader } from 'three/examples/jsm/shaders/RGBShiftShader';\nimport { BaseJourney } from './BaseJourney';\n\n/**\n * Journey - post-processing\n */\n\nexport class Journey32 extends BaseJourney {\n\tprivate gui: dat.GUI;\n\tprivate clock: THREE.Clock;\n\tprivate controls: OrbitControls;\n\tprivate params: any;\n\n\t/**\n\t * @override\n\t */\n\tprotected onCreating(): void {\n\t\t// params\n\t\tthis.params = {\n\t\t\tenvMapIntensity: 5,\n\t\t};\n\n\t\t// clock\n\t\tthis.clock = new THREE.Clock();\n\n\t\t// GUI\n\t\tthis.gui = new dat.GUI();\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprivate effectComposer: EffectComposer;\n\tprotected onCreated(): void {\n\t\t// controller\n\t\tthis.controls = new OrbitControls(this.camera, this.canvas);\n\t\tthis.controls.enableDamping = true;\n\n\t\tthis.renderer.shadowMap.enabled = true;\n\t\tthis.renderer.shadowMap.type = THREE.PCFShadowMap;\n\t\tthis.renderer.physicallyCorrectLights = true;\n\t\tthis.renderer.outputEncoding = THREE.sRGBEncoding;\n\t\tthis.renderer.toneMapping = THREE.ReinhardToneMapping;\n\t\tthis.renderer.toneMappingExposure = 1.5;\n\n\t\tconst renderTarget = new THREE.WebGLRenderTarget(this.width, this.height, {\n\t\t\tminFilter: THREE.LinearFilter,\n\t\t\tmagFilter: THREE.LinearFilter,\n\t\t\tformat: THREE.RGBAFormat,\n\t\t\tencoding: THREE.sRGBEncoding,\n\t\t});\n\n\t\t// effectComposer\n\t\tconst effectComposer = new EffectComposer(this.renderer, renderTarget);\n\t\t// const effectComposer = new EffectComposer(this.renderer);\n\t\teffectComposer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n\t\teffectComposer.setSize(this.width, this.height);\n\t\tthis.effectComposer = effectComposer;\n\n\t\tconst renderPass = new RenderPass(this.scene, this.camera);\n\t\teffectComposer.addPass(renderPass);\n\n\t\tconst dotScreenPass = new DotScreenPass();\n\t\tdotScreenPass.enabled = false;\n\t\teffectComposer.addPass(dotScreenPass);\n\n\t\tconst glitchPass = new GlitchPass();\n\t\t// glitchPass.goWild = true;\n\t\tglitchPass.enabled = false;\n\t\teffectComposer.addPass(glitchPass);\n\n\t\tconst shaderPass = new ShaderPass(RGBShiftShader);\n\t\tshaderPass.enabled = false;\n\t\teffectComposer.addPass(shaderPass);\n\n\t\t// // Tint pass\n\t\t// const TintShader = {\n\t\t// \tuniforms: {\n\t\t// \t\ttDiffuse: { value: null },\n\t\t// \t\tuTint: { value: null },\n\t\t// \t},\n\t\t// \tvertexShader: `\n\t\t//         varying vec2, vUv;\n\n\t\t//         void main(){\n\t\t//             gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n\n\t\t//             vUv = uv;\n\t\t//         }\n\t\t//     `,\n\t\t// \tfragmentShader: `\n\t\t//         uniform sampler2D tDiffuse;\n\t\t//         uniform vec3 uTint;\n\n\t\t//         varying vec2, vUv;\n\n\t\t//         void main() {\n\t\t//             vec4 color = texture2D(tDiffuse, vUv);\n\t\t//             color.rgb += uTint;\n\t\t//             gl_FragColor = color;\n\t\t//         }\n\t\t//     `,\n\t\t// };\n\t\t// const tintPass = new ShaderPass(TintShader);\n\t\t// tintPass.material.uniforms.uTint.value = new THREE.Vector3();\n\t\t// effectComposer.addPass(tintPass);\n\t\tconst textureLoader = new THREE.TextureLoader();\n\t\tconst displaceMentShader = {\n\t\t\tuniforms: {\n\t\t\t\ttDiffuse: { value: null },\n\t\t\t\tuNormalMap: { value: null },\n\t\t\t},\n\t\t\tvertexShader: `\n                varying vec2, vUv;\n\n                void main(){\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                    \n                    vUv = uv;\n                }\n            `,\n\t\t\tfragmentShader: `\n                uniform sampler2D tDiffuse;\n                uniform sampler2D uNormalMap;\n                uniform vec3 uTint;\n                                \n                varying vec2, vUv;\n\n                void main() {\n                    vec3 normalColor = texture2D(uNormalMap, vUv).xyz * 2.0 - 1.0;\n\n                    vec2 newUv = vUv + normalColor.xy * 0.1;\n                    vec4 color = texture2D(tDiffuse, newUv);\n\n                    vec3 lightDirection = normalize(vec3(-1.0, 1.0, 0.0));\n                    float lightness = dot(normalColor, lightDirection);\n                    color.rgb += lightness * 1.0;\n\n                    gl_FragColor = color;\n                }\n            `,\n\t\t};\n\t\tconst displacementPass = new ShaderPass(displaceMentShader);\n\t\tdisplacementPass.uniforms.uNormalMap.value = textureLoader.load('./resource/journey/interfaceNormalMap.png');\n\t\tthis.effectComposer.addPass(displacementPass);\n\t}\n\n\tprotected onResize(): void {\n\t\tthis.effectComposer.setSize(this.width, this.height);\n\t}\n\n\t/**\n\t * @protected\n\t */\n\tprotected initLight(): void {\n\t\tconst directionalLight = new THREE.DirectionalLight(0xffffff, 3);\n\t\tdirectionalLight.position.set(0.25, 3, -2.25);\n\t\tdirectionalLight.shadow.mapSize.set(1024, 1024);\n\t\tdirectionalLight.castShadow = true;\n\t\tdirectionalLight.shadow.camera.far = 15;\n\t\tdirectionalLight.shadow.normalBias = 0.05;\n\t\tthis.scene.add(directionalLight);\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprotected initCamera(): void {\n\t\tconst camera = new THREE.PerspectiveCamera(75, this.width / this.height, 0.1, 100);\n\t\tcamera.position.set(4, 1, -4);\n\t\tthis.camera = camera;\n\t\tthis.scene.add(camera);\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprotected initModel(): void {\n\t\tconst scene = this.scene;\n\t\tconst textureLoader = new THREE.TextureLoader();\n\t\tconst cubeTextureLoader = new THREE.CubeTextureLoader();\n\t\tconst environmentMap = cubeTextureLoader.load([\n\t\t\t'resource/journey/environmentMaps/0/px.jpg',\n\t\t\t'resource/journey/environmentMaps/0/nx.jpg',\n\t\t\t'resource/journey/environmentMaps/0/py.jpg',\n\t\t\t'resource/journey/environmentMaps/0/ny.jpg',\n\t\t\t'resource/journey/environmentMaps/0/pz.jpg',\n\t\t\t'resource/journey/environmentMaps/0/nz.jpg',\n\t\t]);\n\t\tenvironmentMap.encoding = THREE.sRGBEncoding;\n\t\tscene.background = environmentMap;\n\t\tscene.environment = environmentMap;\n\n\t\tconst dracoLoader = new DRACOLoader();\n\t\tdracoLoader.setDecoderPath('resource/draco/');\n\n\t\tconst gltfLoader = new GLTFLoader();\n\t\tgltfLoader.setDRACOLoader(dracoLoader);\n\n\t\tgltfLoader.load(\n\t\t\t'./resource/journey/models/DamagedHelmet/glTF/DamagedHelmet.gltf',\n\t\t\tgltf => {\n\t\t\t\tgltf.scene.scale.set(2, 2, 2);\n\t\t\t\tgltf.scene.rotation.y = Math.PI * 0.5;\n\t\t\t\tscene.add(gltf.scene);\n\n\t\t\t\tthis.updateAllMaterial();\n\t\t\t},\n\t\t\t() => {\n\t\t\t\tconsole.log('progress');\n\t\t\t},\n\t\t\te => {\n\t\t\t\tconsole.log('error', e);\n\t\t\t},\n\t\t);\n\t}\n\n\tprivate updateAllMaterial(): void {\n\t\tthis.scene.traverse(child => {\n\t\t\tif (child instanceof THREE.Mesh && child.material instanceof THREE.MeshStandardMaterial) {\n\t\t\t\tchild.material.envMapIntensity = this.params.envMapIntensity;\n\t\t\t\tchild.material.needsUpdate = true;\n\t\t\t\tchild.receiveShadow = true;\n\t\t\t\tchild.castShadow = true;\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprivate lastTimeStamp: number = 0;\n\tprotected onRender(): void {\n\t\tthis.controls.update();\n\t\t// this.renderer.render(this.scene, this.camera);\n\t\tthis.effectComposer.render();\n\n\t\tconst elapsedTime = this.clock.getElapsedTime();\n\t\tconst deltaTime = elapsedTime - this.lastTimeStamp;\n\t\tthis.lastTimeStamp = elapsedTime;\n\t}\n\n\t/**\n\t * @protected\n\t */\n\tprotected onDestroy(): void {\n\t\tthis.gui?.destroy();\n\t}\n}\n"],"names":["BaseApplication","canvas","appId","appName","width","height","viewCenter","handle","this","initRender","renderer","antialias","setSize","setClearColor","setPixelRatio","window","devicePixelRatio","initScene","scene","initCamera","initLight","initModel","onCreating","onCreated","onRender","onDestroy","onResize","create","render","clear","requestAnimationFrame","bind","run","resize","innerWidth","innerHeight","camera","aspect","updateProjectionMatrix","Math","min","destroy","cancelAnimationFrame","console","log","BaseJourney","Journey32","lastTimeStamp","params","envMapIntensity","clock","gui","controls","enableDamping","shadowMap","enabled","type","physicallyCorrectLights","outputEncoding","toneMapping","toneMappingExposure","renderTarget","minFilter","magFilter","format","encoding","effectComposer","renderPass","addPass","dotScreenPass","glitchPass","shaderPass","textureLoader","displaceMentShader","uniforms","tDiffuse","value","uNormalMap","vertexShader","fragmentShader","displacementPass","load","directionalLight","position","set","shadow","mapSize","castShadow","far","normalBias","add","environmentMap","background","environment","dracoLoader","setDecoderPath","gltfLoader","setDRACOLoader","gltf","scale","rotation","y","PI","updateAllMaterial","e","traverse","child","material","needsUpdate","receiveShadow","update","elapsedTime","getElapsedTime"],"sourceRoot":""}