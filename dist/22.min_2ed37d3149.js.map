{"version":3,"file":"22.min_2ed37d3149.js","mappings":"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","sources":["webpack://tp_threejs/./src/ThreeJs/Shaders/Test/test.fs.glsl","webpack://tp_threejs/./src/ThreeJs/Shaders/Test/test.vs.glsl","webpack://tp_threejs/./src/Helper/DebugHelper.ts","webpack://tp_threejs/./src/ThreeJs/BaseApplication.ts","webpack://tp_threejs/./src/ThreeJs/Journey/BaseJourney.ts","webpack://tp_threejs/./src/ThreeJs/Journey/Journey27.ts"],"sourcesContent":["export default \"uniform vec3 uColor;\\nuniform sampler2D uTexture;\\n\\nvarying vec2 vUv;\\nvarying float vElevation;\\n\\nvoid main() {\\n    vec4 textureColor = texture2D(uTexture, vUv);\\n    textureColor.rgb *= vElevation + 0.5;\\n    // gl_FragColor = vec4(uColor, 1.0);\\n    gl_FragColor = textureColor;\\n}\";","export default \"uniform float uTime;\\nuniform vec2 uFrequency;\\n\\nvarying vec2 vUv;\\nvarying float vElevation;\\n\\nvoid main() {\\n    vec4 modelPosition = modelMatrix * vec4(position, 1.0);\\n\\n    float elevation = sin(modelPosition.x * uFrequency.x + uTime) * 0.3;\\n    elevation += sin(modelPosition.y * uFrequency.y + uTime) * 0.3;\\n\\n    modelPosition.z += elevation;\\n\\n    gl_Position = projectionMatrix * viewMatrix * modelPosition;\\n\\n    vUv = uv;\\n    vElevation = elevation;\\n}\";","import * as dat from 'dat.gui';\nimport * as THREE from 'three';\n\nexport function makeXYZGUI(gui: dat.GUI, vector3: THREE.Vector3, name?: string, onChangeFn?: () => void) {\n\tif (name) {\n\t\tgui = gui.addFolder(name);\n\t}\n\tgui.add(vector3, 'x', -10, 10, 0.01).onChange(onChangeFn);\n\tgui.add(vector3, 'y', 0, 10, 0.01).onChange(onChangeFn);\n\tgui.add(vector3, 'z', -10, 10, 0.01).onChange(onChangeFn);\n\t// gui.open();\n}\n\n/**\n * 颜色转换\n */\nexport class ColorGUIHelper {\n\tprivate obj: any;\n\tprivate prop: any;\n\tconstructor(obj, prop) {\n\t\tthis.obj = obj;\n\t\tthis.prop = prop;\n\t}\n\tget value() {\n\t\treturn `#${this.obj[this.prop].getHexString()}`;\n\t}\n\tset value(hexString) {\n\t\tthis.obj[this.prop].set(hexString);\n\t}\n}\n\n/**\n * 角度转换\n */\nexport class DegRadHelper {\n\tprivate obj: any;\n\tprivate prop: any;\n\tconstructor(obj, prop) {\n\t\tthis.obj = obj;\n\t\tthis.prop = prop;\n\t}\n\tget value() {\n\t\treturn THREE.MathUtils.radToDeg(this.obj[this.prop]);\n\t}\n\tset value(v) {\n\t\tthis.obj[this.prop] = THREE.MathUtils.degToRad(v);\n\t}\n}\n\n/**\n * 字符转换\n */\nexport class StringToNumberHelper {\n\tprivate obj: any;\n\tprivate prop: any;\n\tconstructor(obj, prop) {\n\t\tthis.obj = obj;\n\t\tthis.prop = prop;\n\t}\n\tget value() {\n\t\treturn this.obj[this.prop];\n\t}\n\tset value(v) {\n\t\tthis.obj[this.prop] = parseFloat(v);\n\t}\n}\n","import { Camera, PerspectiveCamera, Scene, Vector3, WebGLRenderer } from 'three';\nimport { STAGE } from './../Config';\n\n/**\n * 应用基类\n */\nexport class BaseApplication {\n\tpublic appId: string = '00';\n\tpublic appName: string = 'BASE';\n\tprotected width: number = STAGE.width;\n\tprotected height: number = STAGE.height;\n\tprotected canvas: HTMLCanvasElement = null;\n\n\tprotected scene: Scene;\n\tprotected camera: Camera;\n\tprotected renderer: WebGLRenderer;\n\tprotected viewCenter: Vector3 = new Vector3(0, 0, 0);\n\n\tpublic constructor(canvas: HTMLCanvasElement) {\n\t\tthis.canvas = canvas;\n\t}\n\n\t/**\n\t * @override 子类覆写\n\t */\n\tprotected initRender(): void {\n\t\tconst renderer = new WebGLRenderer({\n\t\t\tantialias: true, // 抗锯齿开启\n\t\t\tcanvas: this.canvas,\n\t\t});\n\t\trenderer.setSize(this.width, this.height); // 设置渲染器的宽度和高度\n\t\trenderer.setClearColor('#000000', 1.0); // 设置背景颜色\n\t\trenderer.setPixelRatio(window.devicePixelRatio); // 设置设备像素比\n\n\t\tthis.renderer = renderer;\n\t}\n\n\t/**\n\t * @override 子类覆写\n\t */\n\tprotected initScene(): void {\n\t\tconst scene = new Scene();\n\t\tthis.scene = scene;\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprotected initCamera(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t */\n\tprotected initLight(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t */\n\tprotected initModel(): void {}\n\n\t/**\n\t * @override 子类复写\n\t */\n\tprotected onCreating(): void {}\n\n\t/**\n\t * @override 子类复写\n\t */\n\tprotected onCreated(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t * 开始渲染\n\t */\n\tprotected onRender(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t * 开始销毁\n\t */\n\tprotected onDestroy(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t * 开始 resize\n\t */\n\tprotected onResize(): void {}\n\n\t/**\n\t * 创建后的调用\n\t */\n\tprivate create(): void {\n\t\tthis.onCreating();\n\t\tthis.initRender();\n\t\tthis.initScene();\n\t\tthis.initCamera();\n\t\tthis.initLight();\n\t\tthis.initModel();\n\t\tthis.onCreated();\n\t}\n\n\t/**\n\t * 渲染\n\t */\n\tprivate render(): void {\n\t\tthis.renderer?.clear();\n\t\tthis.onRender();\n\t\tthis.handle = requestAnimationFrame(this.render.bind(this));\n\t}\n\n\t/**\n\t * 开始执行\n\t */\n\tprivate handle: number = -1;\n\tpublic run(): void {\n\t\tthis.create();\n\t\tthis.render();\n\t}\n\n\t/**\n\t * 视口变化\n\t */\n\tpublic resize(): void {\n\t\t// update size\n\t\tthis.width = window.innerWidth;\n\t\tthis.height = window.innerHeight;\n\n\t\t// update camera\n\t\tif (this.camera && this.camera instanceof PerspectiveCamera) {\n\t\t\tthis.camera.aspect = this.width / this.height;\n\t\t\tthis.camera.updateProjectionMatrix();\n\t\t}\n\n\t\t// update renderer\n\t\tthis.renderer?.setSize(this.width, this.height);\n\t\tthis.renderer?.setPixelRatio(Math.min(2, window.devicePixelRatio));\n\n\t\tthis.onResize();\n\t}\n\n\t/**\n\t * @override 子类覆写\n\t * 销毁清理\n\t */\n\tpublic destroy(): void {\n\t\tthis.onDestroy();\n\n\t\tthis.scene.clear();\n\t\tthis.renderer.clear();\n\t\tcancelAnimationFrame(this.handle);\n\t\tconsole.log(`销毁应用【${this.appId} ${this.appName}】`);\n\t}\n}\n","import { BaseApplication } from '../BaseApplication';\n\nexport class BaseJourney extends BaseApplication {}\n","import * as dat from 'dat.gui';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { ColorGUIHelper } from '../../Helper/DebugHelper';\nimport fragmentShader from '../Shaders/Test/test.fs.glsl';\nimport vertexShader from '../Shaders/Test/test.vs.glsl';\nimport { BaseJourney } from './BaseJourney';\n\n/**\n * Journey - Shaders\n */\nexport class Journey27 extends BaseJourney {\n\tprivate gui: dat.GUI;\n\tprivate clock: THREE.Clock;\n\tprivate controls: OrbitControls;\n\tprivate params: any;\n\n\t/**\n\t * @override\n\t */\n\tprotected onCreating(): void {\n\t\t// params\n\t\tthis.params = {};\n\n\t\t// clock\n\t\tthis.clock = new THREE.Clock();\n\n\t\t// GUI\n\t\tthis.gui = new dat.GUI();\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprotected onCreated(): void {\n\t\t// controller\n\t\tthis.controls = new OrbitControls(this.camera, this.canvas);\n\t\tthis.controls.enableDamping = true;\n\t}\n\n\t/**\n\t * @protected\n\t */\n\tprotected initLight(): void {}\n\n\t/**\n\t * @override\n\t */\n\tprotected initCamera(): void {\n\t\tconst camera = new THREE.PerspectiveCamera(35, this.width / this.height, 0.1, 100);\n\t\tcamera.position.set(1, 1, 3);\n\t\t// camera.lookAt(new THREE.Vector3(0, 0, 0));\n\n\t\tthis.camera = camera;\n\t\tthis.scene.add(camera);\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprivate material: THREE.RawShaderMaterial;\n\tprotected initModel(): void {\n\t\tconst textureLoader = new THREE.TextureLoader();\n\t\tconst flagTexture = textureLoader.load('./resource/journey/flag-french.jpg');\n\n\t\t// Geometry\n\t\tconst geometry = new THREE.PlaneBufferGeometry(1, 1, 32, 32);\n\n\t\t// const material = new THREE.RawShaderMaterial({\n\t\tconst material = new THREE.ShaderMaterial({\n\t\t\tvertexShader,\n\t\t\tfragmentShader,\n\t\t\tuniforms: {\n\t\t\t\tuFrequency: { value: new THREE.Vector2(5, 5) },\n\t\t\t\tuTime: { value: 0.0 },\n\t\t\t\tuColor: { value: new THREE.Color('orange') },\n\t\t\t\tuTexture: { value: flagTexture },\n\t\t\t},\n\t\t});\n\t\tthis.material = material;\n\t\tthis.gui.add(material.uniforms.uFrequency.value, 'x').min(0).max(10).name('FrequencyX');\n\t\tthis.gui.add(material.uniforms.uFrequency.value, 'y').min(0).max(10).name('FrequencyY');\n\t\tthis.gui.addColor(new ColorGUIHelper(material.uniforms.uColor, 'value'), 'value').name('uColor');\n\n\t\t// Mesh\n\t\tconst mesh = new THREE.Mesh(geometry, material);\n\t\tthis.scene.add(mesh);\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprotected onRender(): void {\n\t\tthis.renderer.render(this.scene, this.camera);\n\t\tlet elapsedTime = this.clock.getElapsedTime();\n\t\tthis.material.uniforms.uTime.value = elapsedTime;\n\t}\n\n\t/**\n\t * @protected\n\t */\n\tprotected onDestroy(): void {\n\t\tthis.gui?.destroy();\n\t}\n}\n"],"names":["makeXYZGUI","gui","vector3","name","onChangeFn","addFolder","add","onChange","ColorGUIHelper","constructor","obj","prop","this","value","getHexString","hexString","set","DegRadHelper","v","BaseApplication","canvas","appId","appName","width","height","viewCenter","handle","initRender","renderer","antialias","setSize","setClearColor","setPixelRatio","window","devicePixelRatio","initScene","scene","initCamera","initLight","initModel","onCreating","onCreated","onRender","onDestroy","onResize","create","render","clear","requestAnimationFrame","bind","run","resize","innerWidth","innerHeight","camera","aspect","updateProjectionMatrix","Math","min","destroy","cancelAnimationFrame","console","log","BaseJourney","Journey27","params","clock","controls","enableDamping","position","flagTexture","load","geometry","material","vertexShader","fragmentShader","uniforms","uFrequency","uTime","uColor","uTexture","max","addColor","mesh","elapsedTime","getElapsedTime"],"sourceRoot":""}