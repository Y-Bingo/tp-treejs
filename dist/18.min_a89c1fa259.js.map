{"version":3,"file":"18.min_a89c1fa259.js","mappings":"6IAAA,2X,6CCAA,4J,uDCMO,MAAMA,EAYZ,YAAmBC,GAXZ,KAAAC,MAAgB,KAChB,KAAAC,QAAkB,OACf,KAAAC,MAAgB,UAChB,KAAAC,OAAiB,WACjB,KAAAJ,OAA4B,KAK5B,KAAAK,WAAsB,IAAI,KAAQ,EAAG,EAAG,GAiG1C,KAAAC,QAAkB,EA9FzBC,KAAKP,OAASA,EAMLQ,aACT,MAAMC,EAAW,IAAI,KAAc,CAClCC,WAAW,EACXV,OAAQO,KAAKP,SAEdS,EAASE,QAAQJ,KAAKJ,MAAOI,KAAKH,QAClCK,EAASG,cAAc,UAAW,GAClCH,EAASI,cAAcC,OAAOC,kBAE9BR,KAAKE,SAAWA,EAMPO,YACT,MAAMC,EAAQ,IAAI,KAClBV,KAAKU,MAAQA,EAMJC,cAKAC,aAKAC,aAKAC,cAKAC,aAMAC,YAMAC,aAMAC,YAKFC,SACPnB,KAAKc,aACLd,KAAKC,aACLD,KAAKS,YACLT,KAAKW,aACLX,KAAKY,YACLZ,KAAKa,YACLb,KAAKe,YAMEK,S,MACM,QAAb,EAAApB,KAAKE,gBAAQ,SAAEmB,QACfrB,KAAKgB,WACLhB,KAAKD,OAASuB,sBAAsBtB,KAAKoB,OAAOG,KAAKvB,OAO/CwB,MACNxB,KAAKmB,SACLnB,KAAKoB,SAMCK,S,QAENzB,KAAKJ,MAAQW,OAAOmB,WACpB1B,KAAKH,OAASU,OAAOoB,YAGjB3B,KAAK4B,QAAU5B,KAAK4B,kBAAkB,OACzC5B,KAAK4B,OAAOC,OAAS7B,KAAKJ,MAAQI,KAAKH,OACvCG,KAAK4B,OAAOE,0BAIA,QAAb,EAAA9B,KAAKE,gBAAQ,SAAEE,QAAQJ,KAAKJ,MAAOI,KAAKH,QAC3B,QAAb,EAAAG,KAAKE,gBAAQ,SAAEI,cAAcyB,KAAKC,IAAI,EAAGzB,OAAOC,mBAEhDR,KAAKkB,WAOCe,UACNjC,KAAKiB,YAELjB,KAAKU,MAAMW,QACXrB,KAAKE,SAASmB,QACda,qBAAqBlC,KAAKD,QAC1BoC,QAAQC,IAAI,QAAQpC,KAAKN,SAASM,KAAKL,e,8DCpJlC,MAAM0C,UAAoB,O,+GCQ1B,MAAMC,UAAkB,EAAAD,YASpBvB,aAETd,KAAKuC,OAAS,GAGdvC,KAAKwC,MAAQ,IAAI,IAGjBxC,KAAKyC,IAAM,IAAI,IAMN1B,YAETf,KAAK0C,SAAW,IAAI,IAAc1C,KAAK4B,OAAQ5B,KAAKP,QACpDO,KAAK0C,SAASC,eAAgB,EAMrB/B,aAKAD,aACT,MAAMiB,EAAS,IAAI,KAAwB,GAAI5B,KAAKJ,MAAQI,KAAKH,OAAQ,GAAK,KAC9E+B,EAAOgB,SAASC,IAAI,EAAG,EAAG,GAG1B7C,KAAK4B,OAASA,EACd5B,KAAKU,MAAMoC,IAAIlB,GAONf,YACa,IAAI,KAA1B,MAIMkC,EAAW,IAAI,KAA0B,EAAG,EAAG,GAAI,IAEnDC,EAAW,IAAI,KAAqB,CACzCC,aAAY,UACZC,eAAc,UACdC,KAAM,MAODC,EAAO,IAAI,KAAWL,EAAUC,GACtChD,KAAKU,MAAMoC,IAAIM,GAEfjB,QAAQC,IAAIW,EAAUC,EAAUI,GAMvBpC,WACThB,KAAKE,SAASkB,OAAOpB,KAAKU,MAAOV,KAAK4B,QACpB5B,KAAKwC,MAAMa,iBAOpBpC,Y,MACD,QAAR,EAAAjB,KAAKyC,WAAG,SAAER","sources":["webpack://tp_threejs/./src/ThreeJs/Shaders/Pattern/pattern.fs.glsl","webpack://tp_threejs/./src/ThreeJs/Shaders/Pattern/pattern.vs.glsl","webpack://tp_threejs/./src/ThreeJs/BaseApplication.ts","webpack://tp_threejs/./src/ThreeJs/Journey/BaseJourney.ts","webpack://tp_threejs/./src/ThreeJs/Journey/Journey28.ts"],"sourcesContent":["export default \"varying vec2 vUv;\\n\\nvoid main() {\\n\\n    // pattern 3 \\n    // float strength = vUv.x;\\n\\n    // pattern 4\\n    // float strength = vUv.y * 1.0;\\n\\n    // pattern 5\\n    // float strength = mod(vUv.y * 10.0, 1.0 );\\n\\n    // pattern 6\\n    float strength = vUv.x;\\n    strength = step(0.9, strength);\\n\\n    gl_FragColor = vec4(strength, strength, strength, 1.0);\\n}\";","export default \"varying vec2 vUv;\\n\\nvoid main() {\\n\\n    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);\\n\\n\\n    vUv = uv;\\n}\";","import { Camera, PerspectiveCamera, Scene, Vector3, WebGLRenderer } from 'three';\nimport { STAGE } from './../Config';\n\n/**\n * 应用基类\n */\nexport class BaseApplication {\n\tpublic appId: string = '00';\n\tpublic appName: string = 'BASE';\n\tprotected width: number = STAGE.width;\n\tprotected height: number = STAGE.height;\n\tprotected canvas: HTMLCanvasElement = null;\n\n\tprotected scene: Scene;\n\tprotected camera: Camera;\n\tprotected renderer: WebGLRenderer;\n\tprotected viewCenter: Vector3 = new Vector3(0, 0, 0);\n\n\tpublic constructor(canvas: HTMLCanvasElement) {\n\t\tthis.canvas = canvas;\n\t}\n\n\t/**\n\t * @override 子类覆写\n\t */\n\tprotected initRender(): void {\n\t\tconst renderer = new WebGLRenderer({\n\t\t\tantialias: true, // 抗锯齿开启\n\t\t\tcanvas: this.canvas,\n\t\t});\n\t\trenderer.setSize(this.width, this.height); // 设置渲染器的宽度和高度\n\t\trenderer.setClearColor('#000000', 1.0); // 设置背景颜色\n\t\trenderer.setPixelRatio(window.devicePixelRatio); // 设置设备像素比\n\n\t\tthis.renderer = renderer;\n\t}\n\n\t/**\n\t * @override 子类覆写\n\t */\n\tprotected initScene(): void {\n\t\tconst scene = new Scene();\n\t\tthis.scene = scene;\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprotected initCamera(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t */\n\tprotected initLight(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t */\n\tprotected initModel(): void {}\n\n\t/**\n\t * @override 子类复写\n\t */\n\tprotected onCreating(): void {}\n\n\t/**\n\t * @override 子类复写\n\t */\n\tprotected onCreated(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t * 开始渲染\n\t */\n\tprotected onRender(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t * 开始销毁\n\t */\n\tprotected onDestroy(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t * 开始 resize\n\t */\n\tprotected onResize(): void {}\n\n\t/**\n\t * 创建后的调用\n\t */\n\tprivate create(): void {\n\t\tthis.onCreating();\n\t\tthis.initRender();\n\t\tthis.initScene();\n\t\tthis.initCamera();\n\t\tthis.initLight();\n\t\tthis.initModel();\n\t\tthis.onCreated();\n\t}\n\n\t/**\n\t * 渲染\n\t */\n\tprivate render(): void {\n\t\tthis.renderer?.clear();\n\t\tthis.onRender();\n\t\tthis.handle = requestAnimationFrame(this.render.bind(this));\n\t}\n\n\t/**\n\t * 开始执行\n\t */\n\tprivate handle: number = -1;\n\tpublic run(): void {\n\t\tthis.create();\n\t\tthis.render();\n\t}\n\n\t/**\n\t * 视口变化\n\t */\n\tpublic resize(): void {\n\t\t// update size\n\t\tthis.width = window.innerWidth;\n\t\tthis.height = window.innerHeight;\n\n\t\t// update camera\n\t\tif (this.camera && this.camera instanceof PerspectiveCamera) {\n\t\t\tthis.camera.aspect = this.width / this.height;\n\t\t\tthis.camera.updateProjectionMatrix();\n\t\t}\n\n\t\t// update renderer\n\t\tthis.renderer?.setSize(this.width, this.height);\n\t\tthis.renderer?.setPixelRatio(Math.min(2, window.devicePixelRatio));\n\n\t\tthis.onResize();\n\t}\n\n\t/**\n\t * @override 子类覆写\n\t * 销毁清理\n\t */\n\tpublic destroy(): void {\n\t\tthis.onDestroy();\n\n\t\tthis.scene.clear();\n\t\tthis.renderer.clear();\n\t\tcancelAnimationFrame(this.handle);\n\t\tconsole.log(`销毁应用【${this.appId} ${this.appName}】`);\n\t}\n}\n","import { BaseApplication } from '../BaseApplication';\n\nexport class BaseJourney extends BaseApplication {}\n","import * as dat from 'dat.gui';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport fragmentShader from '../Shaders/Pattern/pattern.fs.glsl';\nimport vertexShader from '../Shaders/Pattern/pattern.vs.glsl';\nimport { BaseJourney } from './BaseJourney';\n\n/**\n * Journey - Shaders Pattern\n */\nexport class Journey28 extends BaseJourney {\n\tprivate gui: dat.GUI;\n\tprivate clock: THREE.Clock;\n\tprivate controls: OrbitControls;\n\tprivate params: any;\n\n\t/**\n\t * @override\n\t */\n\tprotected onCreating(): void {\n\t\t// params\n\t\tthis.params = {};\n\n\t\t// clock\n\t\tthis.clock = new THREE.Clock();\n\n\t\t// GUI\n\t\tthis.gui = new dat.GUI();\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprotected onCreated(): void {\n\t\t// controller\n\t\tthis.controls = new OrbitControls(this.camera, this.canvas);\n\t\tthis.controls.enableDamping = true;\n\t}\n\n\t/**\n\t * @protected\n\t */\n\tprotected initLight(): void {}\n\n\t/**\n\t * @override\n\t */\n\tprotected initCamera(): void {\n\t\tconst camera = new THREE.PerspectiveCamera(35, this.width / this.height, 0.1, 100);\n\t\tcamera.position.set(1, 1, 3);\n\t\t// camera.lookAt(new THREE.Vector3(0, 0, 0));\n\n\t\tthis.camera = camera;\n\t\tthis.scene.add(camera);\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprivate material: THREE.RawShaderMaterial;\n\tprotected initModel(): void {\n\t\tconst textureLoader = new THREE.TextureLoader();\n\t\t// const flagTexture = textureLoader.load('./resource/journey/flag-french.jpg');\n\n\t\t// Geometry\n\t\tconst geometry = new THREE.PlaneBufferGeometry(1, 1, 32, 32);\n\n\t\tconst material = new THREE.ShaderMaterial({\n\t\t\tvertexShader,\n\t\t\tfragmentShader,\n\t\t\tside: THREE.DoubleSide,\n\t\t});\n\t\t// this.material = material;\n\t\t// this.gui.add(material.uniforms.uFrequency.value, 'x').min(0).max(10).name('FrequencyX');\n\t\t// this.gui.add(material.uniforms.uFrequency.value, 'y').min(0).max(10).name('FrequencyY');\n\t\t// this.gui.addColor(new ColorGUIHelper(material.uniforms.uColor, 'value'), 'value').name('uColor');\n\t\t// Mesh\n\t\tconst mesh = new THREE.Mesh(geometry, material);\n\t\tthis.scene.add(mesh);\n\n\t\tconsole.log(geometry, material, mesh);\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprotected onRender(): void {\n\t\tthis.renderer.render(this.scene, this.camera);\n\t\tlet elapsedTime = this.clock.getElapsedTime();\n\t\t// this.material.uniforms.uTime.value = elapsedTime;\n\t}\n\n\t/**\n\t * @protected\n\t */\n\tprotected onDestroy(): void {\n\t\tthis.gui?.destroy();\n\t}\n}\n"],"names":["BaseApplication","canvas","appId","appName","width","height","viewCenter","handle","this","initRender","renderer","antialias","setSize","setClearColor","setPixelRatio","window","devicePixelRatio","initScene","scene","initCamera","initLight","initModel","onCreating","onCreated","onRender","onDestroy","onResize","create","render","clear","requestAnimationFrame","bind","run","resize","innerWidth","innerHeight","camera","aspect","updateProjectionMatrix","Math","min","destroy","cancelAnimationFrame","console","log","BaseJourney","Journey28","params","clock","gui","controls","enableDamping","position","set","add","geometry","material","vertexShader","fragmentShader","side","mesh","getElapsedTime"],"sourceRoot":""}