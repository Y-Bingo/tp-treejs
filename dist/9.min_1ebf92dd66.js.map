{"version":3,"file":"9.min_1ebf92dd66.js","mappings":"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","sources":["webpack://tp_threejs/./src/ThreeJs/Shaders/Water/water.fs.glsl","webpack://tp_threejs/./src/ThreeJs/Shaders/Water/water.vs.glsl","webpack://tp_threejs/./src/ThreeJs/BaseApplication.ts","webpack://tp_threejs/./src/ThreeJs/Journey/BaseJourney.ts","webpack://tp_threejs/./src/ThreeJs/Journey/Journey29.ts"],"sourcesContent":["export default \"uniform vec3 uDepthColor;\\nuniform vec3 uSurfaceColor;\\nuniform float uColorOffset;\\nuniform float uColorMultiplier;\\n\\nvarying float vElevation;\\n\\nvoid main() {\\n    float mixStrength = (vElevation + uColorOffset) * uColorMultiplier;\\n    vec3 color = mix(uDepthColor, uSurfaceColor, mixStrength);\\n    gl_FragColor = vec4(color, 1.0);\\n}\";","export default \"uniform float uTime;\\nuniform float uBigWavesElevation;\\nuniform vec2 uBigWavesFrequency;\\nuniform float uBigWavesSpeed;\\n\\nuniform float uSmallWavesElevation;\\nuniform float uSmallWavesFrequency;\\nuniform float uSmallWavesSpeed;\\nuniform float uSmallWavesIterations;\\n\\nvarying float vElevation;\\n\\n// Classic Perlin 3D Noise \\n// by Stefan Gustavson\\n//\\nvec4 permute(vec4 x) {\\n    return mod(((x * 34.0) + 1.0) * x, 289.0);\\n}\\nvec4 taylorInvSqrt(vec4 r) {\\n    return 1.79284291400159 - 0.85373472095314 * r;\\n}\\nvec3 fade(vec3 t) {\\n    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);\\n}\\n\\nfloat cnoise(vec3 P) {\\n    vec3 Pi0 = floor(P); // Integer part for indexing\\n    vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\\n    Pi0 = mod(Pi0, 289.0);\\n    Pi1 = mod(Pi1, 289.0);\\n    vec3 Pf0 = fract(P); // Fractional part for interpolation\\n    vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\\n    vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\\n    vec4 iy = vec4(Pi0.yy, Pi1.yy);\\n    vec4 iz0 = Pi0.zzzz;\\n    vec4 iz1 = Pi1.zzzz;\\n\\n    vec4 ixy = permute(permute(ix) + iy);\\n    vec4 ixy0 = permute(ixy + iz0);\\n    vec4 ixy1 = permute(ixy + iz1);\\n\\n    vec4 gx0 = ixy0 / 7.0;\\n    vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\\n    gx0 = fract(gx0);\\n    vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\\n    vec4 sz0 = step(gz0, vec4(0.0));\\n    gx0 -= sz0 * (step(0.0, gx0) - 0.5);\\n    gy0 -= sz0 * (step(0.0, gy0) - 0.5);\\n\\n    vec4 gx1 = ixy1 / 7.0;\\n    vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\\n    gx1 = fract(gx1);\\n    vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\\n    vec4 sz1 = step(gz1, vec4(0.0));\\n    gx1 -= sz1 * (step(0.0, gx1) - 0.5);\\n    gy1 -= sz1 * (step(0.0, gy1) - 0.5);\\n\\n    vec3 g000 = vec3(gx0.x, gy0.x, gz0.x);\\n    vec3 g100 = vec3(gx0.y, gy0.y, gz0.y);\\n    vec3 g010 = vec3(gx0.z, gy0.z, gz0.z);\\n    vec3 g110 = vec3(gx0.w, gy0.w, gz0.w);\\n    vec3 g001 = vec3(gx1.x, gy1.x, gz1.x);\\n    vec3 g101 = vec3(gx1.y, gy1.y, gz1.y);\\n    vec3 g011 = vec3(gx1.z, gy1.z, gz1.z);\\n    vec3 g111 = vec3(gx1.w, gy1.w, gz1.w);\\n\\n    vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\\n    g000 *= norm0.x;\\n    g010 *= norm0.y;\\n    g100 *= norm0.z;\\n    g110 *= norm0.w;\\n    vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\\n    g001 *= norm1.x;\\n    g011 *= norm1.y;\\n    g101 *= norm1.z;\\n    g111 *= norm1.w;\\n\\n    float n000 = dot(g000, Pf0);\\n    float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\\n    float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\\n    float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\\n    float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\\n    float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\\n    float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\\n    float n111 = dot(g111, Pf1);\\n\\n    vec3 fade_xyz = fade(Pf0);\\n    vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\\n    vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\\n    float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\\n    return 2.2 * n_xyz;\\n}\\n\\nvoid main() {\\n    vec4 modelPosition = modelMatrix * vec4(position, 1.0);\\n\\n    // Elevation\\n    float elevation = sin(modelPosition.x * uBigWavesFrequency.x + uTime * uBigWavesSpeed) * sin(modelPosition.z * uBigWavesFrequency.y + uTime * uBigWavesSpeed) * uBigWavesElevation;\\n    for(float i = 1.0; i <= uSmallWavesIterations; i++) {\\n        elevation -= abs(cnoise(vec3(modelPosition.xz * uSmallWavesFrequency * i, uTime * uSmallWavesSpeed)) * uSmallWavesElevation / i);\\n    }\\n\\n    modelPosition.y += elevation;\\n\\n    vec4 viewPosition = viewMatrix * modelPosition;\\n    vec4 projectedPosition = projectionMatrix * viewPosition;\\n\\n    gl_Position = projectedPosition;\\n\\n    // Varying\\n    vElevation = elevation;\\n}\";","import { Camera, PerspectiveCamera, Scene, Vector3, WebGLRenderer } from 'three';\nimport { STAGE } from './../Config';\n\n/**\n * 应用基类\n */\nexport class BaseApplication {\n\tpublic appId: string = '00';\n\tpublic appName: string = 'BASE';\n\tprotected width: number = STAGE.width;\n\tprotected height: number = STAGE.height;\n\tprotected canvas: HTMLCanvasElement = null;\n\n\tprotected scene: Scene;\n\tprotected camera: Camera;\n\tprotected renderer: WebGLRenderer;\n\tprotected viewCenter: Vector3 = new Vector3(0, 0, 0);\n\n\tpublic constructor(canvas: HTMLCanvasElement) {\n\t\tthis.canvas = canvas;\n\t}\n\n\t/**\n\t * @override 子类覆写\n\t */\n\tprotected initRender(): void {\n\t\tconst renderer = new WebGLRenderer({\n\t\t\tantialias: true, // 抗锯齿开启\n\t\t\tcanvas: this.canvas,\n\t\t});\n\t\trenderer.setSize(this.width, this.height); // 设置渲染器的宽度和高度\n\t\trenderer.setClearColor('#000000', 1.0); // 设置背景颜色\n\t\trenderer.setPixelRatio(window.devicePixelRatio); // 设置设备像素比\n\n\t\tthis.renderer = renderer;\n\t}\n\n\t/**\n\t * @override 子类覆写\n\t */\n\tprotected initScene(): void {\n\t\tconst scene = new Scene();\n\t\tthis.scene = scene;\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprotected initCamera(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t */\n\tprotected initLight(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t */\n\tprotected initModel(): void {}\n\n\t/**\n\t * @override 子类复写\n\t */\n\tprotected onCreating(): void {}\n\n\t/**\n\t * @override 子类复写\n\t */\n\tprotected onCreated(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t * 开始渲染\n\t */\n\tprotected onRender(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t * 开始销毁\n\t */\n\tprotected onDestroy(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t * 开始 resize\n\t */\n\tprotected onResize(): void {}\n\n\t/**\n\t * 创建后的调用\n\t */\n\tprivate create(): void {\n\t\tthis.onCreating();\n\t\tthis.initRender();\n\t\tthis.initScene();\n\t\tthis.initCamera();\n\t\tthis.initLight();\n\t\tthis.initModel();\n\t\tthis.onCreated();\n\t}\n\n\t/**\n\t * 渲染\n\t */\n\tprivate render(): void {\n\t\tthis.renderer?.clear();\n\t\tthis.onRender();\n\t\tthis.handle = requestAnimationFrame(this.render.bind(this));\n\t}\n\n\t/**\n\t * 开始执行\n\t */\n\tprivate handle: number = -1;\n\tpublic run(): void {\n\t\tthis.create();\n\t\tthis.render();\n\t}\n\n\t/**\n\t * 视口变化\n\t */\n\tpublic resize(): void {\n\t\t// update size\n\t\tthis.width = window.innerWidth;\n\t\tthis.height = window.innerHeight;\n\n\t\t// update camera\n\t\tif (this.camera && this.camera instanceof PerspectiveCamera) {\n\t\t\tthis.camera.aspect = this.width / this.height;\n\t\t\tthis.camera.updateProjectionMatrix();\n\t\t}\n\n\t\t// update renderer\n\t\tthis.renderer?.setSize(this.width, this.height);\n\t\tthis.renderer?.setPixelRatio(Math.min(2, window.devicePixelRatio));\n\n\t\tthis.onResize();\n\t}\n\n\t/**\n\t * @override 子类覆写\n\t * 销毁清理\n\t */\n\tpublic destroy(): void {\n\t\tthis.onDestroy();\n\n\t\tthis.scene.clear();\n\t\tthis.renderer.clear();\n\t\tcancelAnimationFrame(this.handle);\n\t\tconsole.log(`销毁应用【${this.appId} ${this.appName}】`);\n\t}\n}\n","import { BaseApplication } from '../BaseApplication';\n\nexport class BaseJourney extends BaseApplication {}\n","import * as dat from 'dat.gui';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport fragmentShader from '../Shaders/Water/water.fs.glsl';\nimport vertexShader from '../Shaders/Water/water.vs.glsl';\nimport { BaseJourney } from './BaseJourney';\n\n/**\n * Journey - Raging sea\n */\nexport class Journey29 extends BaseJourney {\n\tprivate gui: dat.GUI;\n\tprivate clock: THREE.Clock;\n\tprivate controls: OrbitControls;\n\tprivate params: any;\n\n\t/**\n\t * @override\n\t */\n\tprotected onCreating(): void {\n\t\t// params\n\t\tthis.params = {};\n\n\t\t// clock\n\t\tthis.clock = new THREE.Clock();\n\n\t\t// GUI\n\t\tthis.gui = new dat.GUI();\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprotected onCreated(): void {\n\t\t// controller\n\t\tthis.controls = new OrbitControls(this.camera, this.canvas);\n\t\tthis.controls.enableDamping = true;\n\t}\n\n\t/**\n\t * @protected\n\t */\n\tprotected initLight(): void {}\n\n\t/**\n\t * @override\n\t */\n\tprotected initCamera(): void {\n\t\tconst camera = new THREE.PerspectiveCamera(35, this.width / this.height, 0.1, 100);\n\t\tcamera.position.set(0, 5, 5);\n\t\t// camera.lookAt(new THREE.Vector3(0, 0, 0));\n\n\t\tthis.camera = camera;\n\t\tthis.scene.add(camera);\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprivate material: THREE.RawShaderMaterial;\n\tprotected initModel(): void {\n\t\tconst debugConfig = {\n\t\t\tdepthColor: 0x186691,\n\t\t\tsurfaceColor: 0x9bd8ff,\n\t\t};\n\t\tconst textureLoader = new THREE.TextureLoader();\n\t\t// const flagTexture = textureLoader.load('./resource/journey/flag-french.jpg');\n\n\t\t// Geometry\n\t\tconst waterGeometry = new THREE.PlaneBufferGeometry(2, 2, 512, 512);\n\n\t\tconst waterMaterial = new THREE.ShaderMaterial({\n\t\t\tvertexShader,\n\t\t\tfragmentShader,\n\t\t\tuniforms: {\n\t\t\t\tuTime: { value: 0 },\n\n\t\t\t\tuBigWavesElevation: { value: 0.2 },\n\t\t\t\tuBigWavesFrequency: { value: new THREE.Vector2(4, 1.5) },\n\t\t\t\tuBigWavesSpeed: { value: 0.75 },\n\n\t\t\t\tuSmallWavesElevation: { value: 0.1 },\n\t\t\t\tuSmallWavesFrequency: { value: 3 },\n\t\t\t\tuSmallWavesSpeed: { value: 0.2 },\n\t\t\t\tuSmallWavesIterations: { value: 4 },\n\n\t\t\t\tuDepthColor: { value: new THREE.Color(debugConfig.depthColor) },\n\t\t\t\tuSurfaceColor: { value: new THREE.Color(debugConfig.surfaceColor) },\n\t\t\t\tuColorOffset: { value: 0.2 },\n\t\t\t\tuColorMultiplier: { value: 3 },\n\t\t\t},\n\t\t\tside: THREE.DoubleSide,\n\t\t});\n\t\tconst water = new THREE.Mesh(waterGeometry, waterMaterial);\n\t\twater.rotation.x = -Math.PI * 0.5;\n\t\tthis.scene.add(water);\n\n\t\tthis.material = waterMaterial;\n\n\t\t// Debug\n\t\tthis.gui.add(waterMaterial.uniforms.uBigWavesElevation, 'value').min(0).max(1).step(0.01).name('uBigWavesElevation');\n\t\tthis.gui.add(waterMaterial.uniforms.uBigWavesFrequency.value, 'x').min(0).max(10).step(0.001).name('uBigWavesFrequency-X');\n\t\tthis.gui.add(waterMaterial.uniforms.uBigWavesFrequency.value, 'y').min(0).max(10).step(0.001).name('uBigWavesFrequency-Y');\n\t\tthis.gui.add(waterMaterial.uniforms.uBigWavesSpeed, 'value').min(0).max(1).step(0.01).name('uBigWavesSpeed');\n\n\t\tthis.gui.add(waterMaterial.uniforms.uSmallWavesElevation, 'value').min(0).max(1).step(0.01).name('uSmallWavesElevation');\n\t\tthis.gui.add(waterMaterial.uniforms.uSmallWavesFrequency, 'value').min(0).max(30).step(0.01).name('uSmallWavesFrequency');\n\t\tthis.gui.add(waterMaterial.uniforms.uSmallWavesSpeed, 'value').min(0).max(4).step(0.01).name('uSmallWavesSpeed');\n\t\tthis.gui.add(waterMaterial.uniforms.uSmallWavesIterations, 'value').min(0).max(8).step(1).name('uSmallWavesIterations');\n\n\t\tthis.gui\n\t\t\t.addColor(debugConfig, 'depthColor')\n\t\t\t.name('depthColor')\n\t\t\t.onChange(() => {\n\t\t\t\twaterMaterial.uniforms.uDepthColor.value.set(debugConfig.depthColor);\n\t\t\t});\n\t\tthis.gui\n\t\t\t.addColor(debugConfig, 'surfaceColor')\n\t\t\t.name('surfaceColor')\n\t\t\t.onChange(() => {\n\t\t\t\twaterMaterial.uniforms.uSurfaceColor.value.set(debugConfig.surfaceColor);\n\t\t\t});\n\n\t\tthis.gui.add(waterMaterial.uniforms.uColorOffset, 'value').min(0).max(1).step(0.01).name('uColorOffset');\n\t\tthis.gui.add(waterMaterial.uniforms.uColorMultiplier, 'value').min(0).max(10).step(0.01).name('uColorMultiplier');\n\n\t\t// console.log(waterGeometry, waterMaterial, water);\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprotected onRender(): void {\n\t\tthis.renderer.render(this.scene, this.camera);\n\t\tlet elapsedTime = this.clock.getElapsedTime();\n\t\tthis.material.uniforms.uTime.value = elapsedTime;\n\t}\n\n\t/**\n\t * @protected\n\t */\n\tprotected onDestroy(): void {\n\t\tthis.gui?.destroy();\n\t}\n}\n"],"names":["BaseApplication","canvas","appId","appName","width","height","viewCenter","handle","this","initRender","renderer","antialias","setSize","setClearColor","setPixelRatio","window","devicePixelRatio","initScene","scene","initCamera","initLight","initModel","onCreating","onCreated","onRender","onDestroy","onResize","create","render","clear","requestAnimationFrame","bind","run","resize","innerWidth","innerHeight","camera","aspect","updateProjectionMatrix","Math","min","destroy","cancelAnimationFrame","console","log","BaseJourney","Journey29","params","clock","gui","controls","enableDamping","position","set","add","debugConfig","depthColor","surfaceColor","waterGeometry","waterMaterial","vertexShader","fragmentShader","uniforms","uTime","value","uBigWavesElevation","uBigWavesFrequency","uBigWavesSpeed","uSmallWavesElevation","uSmallWavesFrequency","uSmallWavesSpeed","uSmallWavesIterations","uDepthColor","uSurfaceColor","uColorOffset","uColorMultiplier","side","water","rotation","x","PI","material","max","step","name","addColor","onChange","elapsedTime","getElapsedTime"],"sourceRoot":""}