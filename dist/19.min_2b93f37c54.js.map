{"version":3,"file":"19.min_2b93f37c54.js","mappings":"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","sources":["webpack://tp_threejs/./src/ThreeJs/BaseApplication.ts","webpack://tp_threejs/./src/ThreeJs/Journey/BaseJourney.ts","webpack://tp_threejs/./src/ThreeJs/Journey/Journey34.ts"],"sourcesContent":["import { Camera, PerspectiveCamera, Scene, Vector3, WebGLRenderer } from 'three';\nimport { STAGE } from './../Config';\n\n/**\n * 应用基类\n */\nexport class BaseApplication {\n\tpublic appId: string = '00';\n\tpublic appName: string = 'BASE';\n\tprotected width: number = STAGE.width;\n\tprotected height: number = STAGE.height;\n\tprotected canvas: HTMLCanvasElement = null;\n\n\tprotected scene: Scene;\n\tprotected camera: Camera;\n\tprotected renderer: WebGLRenderer;\n\tprotected viewCenter: Vector3 = new Vector3(0, 0, 0);\n\n\tpublic constructor(canvas: HTMLCanvasElement) {\n\t\tthis.canvas = canvas;\n\t}\n\n\t/**\n\t * @override 子类覆写\n\t */\n\tprotected initRender(): void {\n\t\tconst renderer = new WebGLRenderer({\n\t\t\tantialias: true, // 抗锯齿开启\n\t\t\tcanvas: this.canvas,\n\t\t});\n\t\trenderer.setSize(this.width, this.height); // 设置渲染器的宽度和高度\n\t\trenderer.setClearColor('#000000', 1.0); // 设置背景颜色\n\t\trenderer.setPixelRatio(window.devicePixelRatio); // 设置设备像素比\n\n\t\tthis.renderer = renderer;\n\t}\n\n\t/**\n\t * @override 子类覆写\n\t */\n\tprotected initScene(): void {\n\t\tconst scene = new Scene();\n\t\tthis.scene = scene;\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprotected initCamera(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t */\n\tprotected initLight(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t */\n\tprotected initModel(): void {}\n\n\t/**\n\t * @override 子类复写\n\t */\n\tprotected onCreating(): void {}\n\n\t/**\n\t * @override 子类复写\n\t */\n\tprotected onCreated(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t * 开始渲染\n\t */\n\tprotected onRender(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t * 开始销毁\n\t */\n\tprotected onDestroy(): void {}\n\n\t/**\n\t * @override 子类覆写\n\t * 开始 resize\n\t */\n\tprotected onResize(): void {}\n\n\t/**\n\t * 创建后的调用\n\t */\n\tprivate create(): void {\n\t\tthis.onCreating();\n\t\tthis.initRender();\n\t\tthis.initScene();\n\t\tthis.initCamera();\n\t\tthis.initLight();\n\t\tthis.initModel();\n\t\tthis.onCreated();\n\t}\n\n\t/**\n\t * 渲染\n\t */\n\tprivate render(): void {\n\t\tthis.renderer?.clear();\n\t\tthis.onRender();\n\t\tthis.handle = requestAnimationFrame(this.render.bind(this));\n\t}\n\n\t/**\n\t * 开始执行\n\t */\n\tprivate handle: number = -1;\n\tpublic run(): void {\n\t\tthis.create();\n\t\tthis.render();\n\t}\n\n\t/**\n\t * 视口变化\n\t */\n\tpublic resize(): void {\n\t\t// update size\n\t\tthis.width = window.innerWidth;\n\t\tthis.height = window.innerHeight;\n\n\t\t// update camera\n\t\tif (this.camera && this.camera instanceof PerspectiveCamera) {\n\t\t\tthis.camera.aspect = this.width / this.height;\n\t\t\tthis.camera.updateProjectionMatrix();\n\t\t}\n\n\t\t// update renderer\n\t\tthis.renderer?.setSize(this.width, this.height);\n\t\tthis.renderer?.setPixelRatio(Math.min(2, window.devicePixelRatio));\n\n\t\tthis.onResize();\n\t}\n\n\t/**\n\t * @override 子类覆写\n\t * 销毁清理\n\t */\n\tpublic destroy(): void {\n\t\tthis.onDestroy();\n\n\t\tthis.scene.clear();\n\t\tthis.renderer.clear();\n\t\tcancelAnimationFrame(this.handle);\n\t\tconsole.log(`销毁应用【${this.appId} ${this.appName}】`);\n\t}\n}\n","import { BaseApplication } from '../BaseApplication';\n\nexport class BaseJourney extends BaseApplication {}\n","import * as dat from 'dat.gui';\nimport { gsap } from 'gsap';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { BaseJourney } from './BaseJourney';\n\nconst loadingBarEle = document.createElement('div') as HTMLElement;\nloadingBarEle.classList.add('loading-bar');\n// const loadingBarEle = document.querySelector('.loading-bar') as HTMLElement;\n\n/**\n * Journey - intro and loading progress\n */\n\nexport class Journey34 extends BaseJourney {\n\tprivate gui: dat.GUI;\n\tprivate clock: THREE.Clock;\n\tprivate controls: OrbitControls;\n\tprivate params: any;\n\n\t/**\n\t * @override\n\t */\n\tprotected onCreating(): void {\n\t\t// params\n\t\tthis.params = {\n\t\t\tenvMapIntensity: 5,\n\t\t};\n\n\t\t// clock\n\t\tthis.clock = new THREE.Clock();\n\n\t\t// GUI\n\t\tthis.gui = new dat.GUI();\n\n\t\tdocument.body.appendChild(loadingBarEle);\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprivate overlayPanel: THREE.Mesh;\n\tprotected onCreated(): void {\n\t\t// controller\n\t\tthis.controls = new OrbitControls(this.camera, this.canvas);\n\t\tthis.controls.enableDamping = true;\n\n\t\tthis.renderer.physicallyCorrectLights = true;\n\t\tthis.renderer.outputEncoding = THREE.sRGBEncoding;\n\t\tthis.renderer.toneMapping = THREE.ACESFilmicToneMapping;\n\t\tthis.renderer.shadowMap.enabled = true;\n\t\tthis.renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n\n\t\t// loading\n\t\tconst overlayGeometry = new THREE.PlaneBufferGeometry(2, 2, 1, 1);\n\t\tconst overlayMaterial = new THREE.ShaderMaterial({\n\t\t\tuniforms: {\n\t\t\t\tuAlpha: { value: 1 },\n\t\t\t},\n\t\t\ttransparent: true,\n\t\t\tvertexShader: `\n                void main(){\n                    gl_Position = vec4(position, 1.0);\n                }\n            `,\n\t\t\tfragmentShader: `\n                uniform float uAlpha;\n                void main(){\n                    gl_FragColor = vec4(0.0, 0.0, 0.0, uAlpha);\n                }\n            `,\n\t\t});\n\t\tconst overlayMesh = new THREE.Mesh(overlayGeometry, overlayMaterial);\n\t\tthis.overlayPanel = overlayMesh;\n\t\tthis.scene.add(overlayMesh);\n\t}\n\n\t/**\n\t * @protected\n\t */\n\tprotected initLight(): void {\n\t\tconst directionalLight = new THREE.DirectionalLight(0xffffff, 3);\n\t\tdirectionalLight.position.set(0.25, 3, -2.25);\n\t\tdirectionalLight.shadow.mapSize.set(1024, 1024);\n\t\tdirectionalLight.castShadow = true;\n\t\tdirectionalLight.shadow.normalBias = 0.05;\n\t\tthis.scene.add(directionalLight);\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprotected initCamera(): void {\n\t\tconst camera = new THREE.PerspectiveCamera(75, this.width / this.height, 0.1, 100);\n\t\tcamera.position.set(-7, 7, 7);\n\t\tthis.camera = camera;\n\t\tthis.scene.add(camera);\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprotected initModel(): void {\n\t\tconst scene = this.scene;\n\t\tconst loadingMrg = new THREE.LoadingManager(\n\t\t\t// Loaded\n\t\t\t() => {\n\t\t\t\tgsap.delayedCall(0.5, () => {\n\t\t\t\t\tgsap.to((this.overlayPanel.material as THREE.ShaderMaterial).uniforms.uAlpha, { duration: 3, value: 0 });\n\t\t\t\t\tloadingBarEle.style.transform = '';\n\t\t\t\t\tloadingBarEle.classList.add('ended');\n\t\t\t\t\t// console.log('[RES] loaded');\n\t\t\t\t});\n\t\t\t},\n\t\t\t// progress\n\t\t\t(itemUrl, itemsLoaded, itemsTotal) => {\n\t\t\t\tconst progressRatio = itemsLoaded / itemsTotal;\n\t\t\t\tloadingBarEle.style.transform = `scaleX(${progressRatio})`;\n\t\t\t\t// console.log('[RES] progress :', itemsLoaded, itemsTotal);\n\t\t\t},\n\t\t);\n\n\t\tconst cubeTextureLoader = new THREE.CubeTextureLoader(loadingMrg);\n\n\t\tconst dracoLoader = new DRACOLoader();\n\t\tdracoLoader.setDecoderPath('resource/draco/');\n\t\tconst gltfLoader = new GLTFLoader(loadingMrg);\n\t\tgltfLoader.setDRACOLoader(dracoLoader);\n\n\t\tconst environmentMap = cubeTextureLoader.load([\n\t\t\t'resource/journey/environmentMaps/3/px.jpg',\n\t\t\t'resource/journey/environmentMaps/3/nx.jpg',\n\t\t\t'resource/journey/environmentMaps/3/py.jpg',\n\t\t\t'resource/journey/environmentMaps/3/ny.jpg',\n\t\t\t'resource/journey/environmentMaps/3/pz.jpg',\n\t\t\t'resource/journey/environmentMaps/3/nz.jpg',\n\t\t]);\n\t\tenvironmentMap.encoding = THREE.sRGBEncoding;\n\t\tscene.background = environmentMap;\n\t\tscene.environment = environmentMap;\n\n\t\tgltfLoader.load('./resource/journey/models/FlightHelmet/glTF/FlightHelmet.gltf', gltf => {\n\t\t\tconst fightHelmet = gltf.scene;\n\t\t\tfightHelmet.scale.set(10, 10, 10);\n\t\t\tfightHelmet.position.set(0, -4, 0);\n\t\t\tfightHelmet.rotation.y = -Math.PI * 0.5;\n\t\t\tscene.add(fightHelmet);\n\n\t\t\tthis.updateAllMaterial();\n\t\t});\n\n\t\t// const sphere = new THREE.Mesh(new THREE.SphereBufferGeometry(1, 32, 32), new THREE.MeshStandardMaterial());\n\t\t// scene.add(sphere);\n\t}\n\n\tprivate updateAllMaterial(): void {\n\t\tthis.scene.traverse(child => {\n\t\t\tif (child instanceof THREE.Mesh && child.material instanceof THREE.MeshStandardMaterial) {\n\t\t\t\tchild.material.envMapIntensity = this.params.envMapIntensity;\n\t\t\t\tchild.material.needsUpdate = true;\n\t\t\t\tchild.receiveShadow = true;\n\t\t\t\tchild.castShadow = true;\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprivate lastTimeStamp: number = 0;\n\tprotected onRender(): void {\n\t\tthis.controls.update();\n\t\tthis.renderer.render(this.scene, this.camera);\n\n\t\tconst elapsedTime = this.clock.getElapsedTime();\n\t\tconst deltaTime = elapsedTime - this.lastTimeStamp;\n\t\tthis.lastTimeStamp = elapsedTime;\n\t}\n\n\t/**\n\t * @protected\n\t */\n\tprotected onDestroy(): void {\n\t\tthis.gui?.destroy();\n\t\tloadingBarEle.classList.remove('ended');\n\t\tdocument.body.removeChild(loadingBarEle);\n\t}\n}\n"],"names":["BaseApplication","canvas","appId","appName","width","height","viewCenter","handle","this","initRender","renderer","antialias","setSize","setClearColor","setPixelRatio","window","devicePixelRatio","initScene","scene","initCamera","initLight","initModel","onCreating","onCreated","onRender","onDestroy","onResize","create","render","clear","requestAnimationFrame","bind","run","resize","innerWidth","innerHeight","camera","aspect","updateProjectionMatrix","Math","min","destroy","cancelAnimationFrame","console","log","BaseJourney","loadingBarEle","document","createElement","classList","add","Journey34","lastTimeStamp","params","envMapIntensity","clock","gui","body","appendChild","controls","enableDamping","physicallyCorrectLights","outputEncoding","toneMapping","shadowMap","enabled","type","overlayGeometry","overlayMaterial","uniforms","uAlpha","value","transparent","vertexShader","fragmentShader","overlayMesh","overlayPanel","directionalLight","position","set","shadow","mapSize","castShadow","normalBias","loadingMrg","material","duration","style","transform","itemUrl","itemsLoaded","itemsTotal","progressRatio","cubeTextureLoader","dracoLoader","setDecoderPath","gltfLoader","setDRACOLoader","environmentMap","load","encoding","background","environment","gltf","fightHelmet","scale","rotation","y","PI","updateAllMaterial","traverse","child","needsUpdate","receiveShadow","update","elapsedTime","getElapsedTime","remove","removeChild"],"sourceRoot":""}